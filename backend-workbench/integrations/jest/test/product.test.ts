import { test, expect, describe } from "@jest/globals";
import mongoose from "mongoose";
import { MongoMemoryServer } from "mongodb-memory-server";
import express, { Response, Request } from "express";
import { Buffer } from "buffer";
import { Workbook } from "exceljs";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";
dayjs.extend(utc);
dayjs.extend(timezone);

import { ProductsSchema } from "../models/Products";
import {
  bulkUploadProducts,
  getAllProducts,
  getProductId,
  searchProduct,
  updateProduct,
} from "../controllers/products.controller";
import {
  createIndent,
  getAllIndents,
  getIndentById,
  updateIndent,
} from "../controllers/indent.controller";
import { IndentSchema } from "../models/Indent";
import {
  createPurchaseOrder,
  getAllPurchaseOrders,
  getPurchaseOrderById,
  getPurchaseOrderByIndentId,
  searchPurchaseOrderByReadableId,
  updatePurchaseOrder,
} from "../controllers/purchaseOrder.controller";
import { SalesOrderSchema } from "../models/SalesOrder";
import { VendorsSchema } from "../models/Vendors";
import { InventorySchema } from "../models/Inventory";
import {
  getSalesOrderById,
  getAllSalesOrder,
  createSalesOrders,
  getAllSalesOrderWeb,
  getSalesOrderByIdWeb,
  searchSOByReadableId,
  updateSalesOrders,
} from "../controllers/salesOrder.controller";
import {
  bulkUploadVendors,
  updateVendor,
  getAllVendors,
  getVendorId,
} from "../controllers/vendors.controller";
import { PurchaseOrderSchema } from "../models/PurchaseOrder";
import { GoodsReceivedNoteSchema } from "../models/GRN";
import exp from "constants";
import {
  createGRN,
  getAllGRN,
  getGRNById,
  searchGRNByReadableId,
  updateGRN,
} from "../controllers/grn.controller";
import { FacilitySchema } from "../models/Facility";
import { addFacility } from "../controllers/facility.controller";
import { CHWInventorySchema } from "../models/CHW-Inventory";
import { PatientSchema } from "../models/Patient";
// import { Organization } from 'src/models/Organization';

const mongoServer = new MongoMemoryServer();
const app = express();

let modelConnectionsToHeader = {};

let newproductId = "";
const productsId: any = [];
let newindentId = "";
let newSubmittedIndent = "";
let submittedIndentDetails: any = "";
let newPODetails: any = "";
let newvendorId: any = "";
let newsalesOrderId: any = "";
let newgrnId: any = "";
let inventory: any = [];
let newSOCHW: any = "";
let newCHWInventoryLists: any = "";
let grnDetails: any = "";
// Handle the connection setup before running the tests
beforeAll(async () => {
  const port = 5026;
  app.use(express.json());
  app.listen(port, () => {
    // tslint:disable-next-line:no-console
    console.log(`server started at http://localhost:${port}`);
  });
  await mongoServer.start();
  // Get the MongoDB connection URI from the memory server
  const mongoUri = await mongoServer.getUri();
  console.log("mongoUri", mongoUri);

  const mongoOption = {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    connectTimeoutMS: 10000,
    socketTimeoutMS: 30000,
  };
  // Establish the MongoDB connection
  const dbs = await mongoose.createConnection(mongoUri, mongoOption);
  await dbs.on("open", () => {
    // tslint:disable-next-line:no-console
    console.log(`Mongoose connection open to ${JSON.stringify(dbs.name)}`);
    // mongoose.set('debug', function (col, method, query, doc) {
    //     // tslint:disable-next-line:no-console
    //     // console.log(
    //     //     `MongoDB :: ${this.conn.name} ${col}.${method}(${JSON.stringify(
    //     //         query
    //     //     )},${JSON.stringify(doc)})`
    //     // );
    // });
  });
  const modelConnections = {
    products: dbs.model("products", ProductsSchema),
    indents: dbs.model("indents", IndentSchema),
    salesOrders: dbs.model("sales-orders", SalesOrderSchema),
    salesOrder: dbs.model("sales-orders", SalesOrderSchema),
    vendors: dbs.model("vendors", VendorsSchema),
    purchaseOrders: dbs.model("purchase-orders", PurchaseOrderSchema),
    inventory: dbs.model("inventories", InventorySchema),
    chwInventories: dbs.model("chw-inventories", CHWInventorySchema),
    grn: dbs.model("grn", GoodsReceivedNoteSchema),
    facilities: dbs.model("inventory-facilities", FacilitySchema),
    patient: dbs.model("inventory-patients", PatientSchema),
  };
  modelConnectionsToHeader = Object(modelConnections);
});

// Handle the connection teardown after running the tests
afterAll(async () => {
  // Close the MongoDB connection
  await mongoose.disconnect();

  // Stop the MongoDB memory server
  await mongoServer.stop();
});

// const addF = (a: number, b: number): number => {
//     console.log('in f');

//     return a + b;
// };

// describe('addF', () => {
//     test('should return the sum of two numbers', () => {
//         const result = addF(1, 2);
//         expect(result).toBe(3);
//     });
// });

/* --- Products Module ----*/
describe("Product Bulk upload API", () => {
  describe("User validations", () => {
    test("User with Role Facility Manager", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRkFDSUxJVFlfTUFOQUdFUiJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.dSMIKN3EeumP1ONgsAPDJhqo9GCGzCSbqaPqnfjWPKQ",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await bulkUploadProducts(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await bulkUploadProducts(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await bulkUploadProducts(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await bulkUploadProducts(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("POST /Create products api without a file in request", async () => {
    interface CustomFile extends File {
      buffer: Buffer;
      fieldname: string;
      originalname: string;
      encoding: string;
      mimetype: string;
      size: number;
      destination: string;
      filename: string;
      path: string;
      stream: any;
    }
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      file: CustomFile;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await bulkUploadProducts(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Missing file",
    });
  });

  test("POST /Create products api with file but not CSV (File validation for CSV)", async () => {
    const workbook = new Workbook();
    const worksheet = workbook.addWorksheet("Sheet 1");
    worksheet.addRow(["Product 1"]);
    worksheet.addRow(["Product 2"]);
    const excelBuffer = await workbook.xlsx.writeBuffer();

    interface CustomFile extends File {
      buffer: Buffer;
      fieldname: string;
      originalname: string;
      encoding: string;
      mimetype: string;
      size: number;
      destination: string;
      filename: string;
      path: string;
      stream: any;
    }
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      file: CustomFile;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
      },
      file: {
        buffer: excelBuffer,
      } as CustomFile,
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await bulkUploadProducts(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Product file Should be a CSV file",
    });
  });

  test("POST /Create products api with file but missing fields)", async () => {
    const csvContent: string =
      "productName,genericName,productCode,hsnCode,sku,status,manufacturerName,schedule,type,incentive,quantityThreshold\n" +
      "cap,gname,P453,h54,skuValue,active,Cip,,,5,5 1\n" +
      ",,,,,,,,,, 2\n";

    const csvBuffer: Buffer = Buffer.from(csvContent, "utf-8");

    interface CustomFile extends File {
      buffer: Buffer;
      fieldname: string;
      originalname: string;
      encoding: string;
      mimetype: string;
      size: number;
      destination: string;
      filename: string;
      path: string;
      stream: any;
    }
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      file: CustomFile;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
      },
      file: {
        fieldname: "csvFile",
        originalname: "example.csv",
        encoding: "utf-8",
        mimetype: "text/csv",
        buffer: csvBuffer,
        size: csvBuffer.length,
      } as CustomFile,
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await bulkUploadProducts(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing data from rows"),
      })
    );
  });

  test("POST /Create products api with file but no data)", async () => {
    const csvContent: string =
      "productName,genericName,productCode,hsnCode,sku,status,manufacturerName,schedule,type,incentive,quantityThreshold\n";

    const csvBuffer: Buffer = Buffer.from(csvContent, "utf-8");

    interface CustomFile extends File {
      buffer: Buffer;
      fieldname: string;
      originalname: string;
      encoding: string;
      mimetype: string;
      size: number;
      destination: string;
      filename: string;
      path: string;
      stream: any;
    }
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      file: CustomFile;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
      },
      file: {
        fieldname: "csvFile",
        originalname: "example.csv",
        encoding: "utf-8",
        mimetype: "text/csv",
        buffer: csvBuffer,
        size: csvBuffer.length,
      } as CustomFile,
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await bulkUploadProducts(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no data in the file",
    });
  });

  test("POST /Create products api with file but incorrect product status)", async () => {
    const csvContent: string =
      "productName,genericName,productCode,hsnCode,sku,status,manufacturerName,schedule,type,incentive,quantityThreshold\n" +
      "cap,gname,P453,h54,skuValue,New,Cip,,,5,5 1\n";

    const csvBuffer: Buffer = Buffer.from(csvContent, "utf-8");

    interface CustomFile extends File {
      buffer: Buffer;
      fieldname: string;
      originalname: string;
      encoding: string;
      mimetype: string;
      size: number;
      destination: string;
      filename: string;
      path: string;
      stream: any;
    }
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      file: CustomFile;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
      },
      file: {
        fieldname: "csvFile",
        originalname: "example.csv",
        encoding: "utf-8",
        mimetype: "text/csv",
        buffer: csvBuffer,
        size: csvBuffer.length,
      } as CustomFile,
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await bulkUploadProducts(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Incorrect data"),
      })
    );
  });

  test("POST /Create products api with file and correct product details)", async () => {
    const csvContent: string =
      "productName,genericName,productCode,hsnCode,sku,status,manufacturerName,schedule,type,incentive,quantityThreshold\n" +
      "cap,gname,P453,h54,skuValue,Active,Cip,,,5,5\n" +
      "crocin,paracetamol,P454,h55,crocin-d4,Active,Cipla,,,5,5";

    const csvBuffer: Buffer = Buffer.from(csvContent, "utf-8");

    interface CustomFile extends File {
      buffer: Buffer;
      fieldname: string;
      originalname: string;
      encoding: string;
      mimetype: string;
      size: number;
      destination: string;
      filename: string;
      path: string;
      stream: any;
    }
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      file: CustomFile;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      file: {
        fieldname: "csvFile",
        originalname: "example.csv",
        encoding: "utf-8",
        mimetype: "text/csv",
        buffer: csvBuffer,
        size: csvBuffer.length,
      } as CustomFile,
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await bulkUploadProducts(mockRequest, mockResponse);
    // await console.log('mr', mockResponse.json.mock.calls);
    const { data } = mockResponse.json.mock.calls[0][0];
    newproductId = data.products[0]._id;
    productsId.push(data.products[0]._id);
    productsId.push(data.products[1]._id);

    expect(mockResponse.status).toHaveBeenCalledWith(201);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Products added successfully",
        data: expect.objectContaining({
          products: expect.any(Object),
        }),
      })
    );
  });

  /*test('POST /Create products api', async () => {
        const csvContent: String =
            'product name,generic name,sku,manufacturer\n' +
            'Product 1,Generic 1,SKU001,Manufacturer 1\n' +
            'Product 2,Generic 2,SKU002,Manufacturer 2\n' +
            'Product 3,Generic 3,SKU003,Manufacturer 3';

        const csvBuffer: Buffer = Buffer.from(csvContent, 'utf-8');
        interface CustomFile extends File {
            buffer: Buffer;
            fieldname: string;
            originalname: string;
            encoding: string;
            mimetype: string;
            size: number;
            destination: string;
            filename: string;
            path: string;
            stream: any;
        }
        interface CustomRequest extends Request {
            cache: any;
            credentials: any;
            destination: any;
            integrity: any;
            keepalive: any;
            mode: any;
            redirect: any;
            referrer: any;
            referrerPolicy: any;
            signal: any;
            clone: any;
            bodyUsed: any;
            arrayBuffer: any;
            blob: any;
            formData: any;
            json: any;
            text: any;
            headers: any;
            file: CustomFile;
            // Add other missing properties here
        }

        interface CustomResponse extends Response {
            headers: any;
            ok: any;
            redirected: any;
            statusText: any;
            url: any;
            clone: any;
            body: any;
            bodyUsed: any;
            arrayBuffer: any;
            blob: any;
            formData: any;
            text: any;
            status: any;
            type: any;
            json: any;
        }

        const mockRequest: CustomRequest = {
            file: {
                fieldname: 'csvFile',
                originalname: 'example.csv',
                encoding: 'utf-8',
                mimetype: 'text/csv',
                buffer: csvBuffer,
                size: csvBuffer.length
            } as CustomFile
        } as CustomRequest;
        const mockResponse: CustomResponse = {
            json: jest.fn(),
            status: jest.fn().mockReturnThis()
            // Add other missing properties here
        } as CustomResponse;
        // const mockRequest = {
        //     headers: {
        //         authorization: 'Bearer <your_token>',
        //         realmName: 'ikure'
        //     }

        await bulkUploadProducts(mockRequest, mockResponse);
        expect(mockResponse.status).toHaveBeenCalledWith(200);
        expect(mockResponse.json).toHaveBeenCalledWith({
            status: true,
            message: 'Success',
            results: 1,
            data: {}
        });
    });*/
});

describe("Product Update API", () => {
  describe("User validations", () => {
    test("User with Role Facility Manager", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRkFDSUxJVFlfTUFOQUdFUiJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.dSMIKN3EeumP1ONgsAPDJhqo9GCGzCSbqaPqnfjWPKQ",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updateProduct(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updateProduct(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updateProduct(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updateProduct(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("POST /update products api missing productId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
      },
      body: JSON.stringify({}),
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateProduct(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("POST /update products api with incorrect productId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: { productId: "647f4063470115f79424158e" },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateProduct(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Product does not exist",
    });
  });

  test("POST /update products api with productId but no other details/fields to update", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: { productId: newproductId },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateProduct(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: expect.stringContaining("There is no data to update"),
    });
  });

  test("POST /update products api with incorrect product status)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        productId: newproductId.toString(),
        status: "nactive",
        genericName: "Paracetamol",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateProduct(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Incorrect product status",
    });
  });

  test("POST /update products api with product category and subCategory)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        productId: newproductId.toString(),
        status: "Active",
        genericName: "Paracetamol",
        category: "Medicine",
        subCategory: "Tablet",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateProduct(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully updated product details",
        data: expect.objectContaining({
          products: expect.any(Object),
        }),
      })
    );
  });

  test("POST /update products api with product subCategory only)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        productId: newproductId.toString(),
        status: "Inactive",
        genericName: "Paracetamol",
        subCategory: "Tablet",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateProduct(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully updated product details",
        data: expect.objectContaining({
          products: expect.any(Object),
        }),
      })
    );
  });

  test("POST /update products api with product category and no subCategory)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        productId: newproductId.toString(),
        status: "Inactive",
        genericName: "Paracetamol",
        category: "Medicine",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateProduct(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully updated product details",
        data: expect.objectContaining({
          products: expect.any(Object),
        }),
      })
    );
  });

  test("POST /update products api with all correct product details)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        productId: newproductId.toString(),
        productName: "Dolo-650",
        status: "Inactive",
        hsnCode: "HD350",
        genericName: "Paracetamol",
        manufacturerName: "Cipla",
        quantityThreshold: 8,
        incentive: 5,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateProduct(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully updated product details",
        data: expect.objectContaining({
          products: expect.any(Object),
        }),
      })
    );
  });
});

describe("Product Get All products API", () => {
  test("GET /get/all get all products api when product doest exist with the given filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        genericName: "Dolo",
        status: 0,
        manufacturerName: "Cipla",
        type: "C",
        category: "Medicine",
        subCategory: "Tablet",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllProducts(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no product",
    });
  });

  test("GET /get/all get all products api with incorrect product status filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        genericName: "Dolo",
        status: 3,
        manufacturerName: "Cipla",
        type: "C",
        category: "Medicine",
        subCategory: "Tablet",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllProducts(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Incorect status",
    });
  });

  test("GET /get/all get all products api with correct product status filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        genericName: "Paracetamol",
        status: 0,
        manufacturerName: "Cipla",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllProducts(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Products list",
        data: expect.objectContaining({
          products: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all products api with inactive status)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        genericName: "Paracetamol",
        status: 1,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllProducts(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Products list",
        data: expect.objectContaining({
          products: expect.any(Array),
        }),
      })
    );
  });
});

describe("Product Get product by Id API", () => {
  test("GET /get/id Api when missing productId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getProductId(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Missing productId",
    });
  });

  test("GET /get/id when product does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        productId: "647f4063470115f79424148e",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getProductId(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Product does not exist",
    });
  });

  test("GET /get/id With correct productId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        productId: newproductId,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getProductId(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Product details",
        data: expect.objectContaining({
          product: expect.any(Object),
        }),
      })
    );
  });
});

describe("Search Product", () => {
  test("POST product search Missing required fields)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await searchProduct(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("There is no data to search"),
      })
    );
  });

  test("POST product search when product does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        productName: "A45325",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await searchProduct(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Product does not exist",
    });
  });

  test("POST product search with correct details)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        genericName: "paracetamol",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await searchProduct(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Products search",
        data: expect.objectContaining({
          products: expect.any(Array),
        }),
      })
    );
  });
});

/* --- Indent Module ----*/

describe("Create Indent API", () => {
  describe("User validations", () => {
    test("User with Role Organization Admin", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await createIndent(mockRequest, mockResponse);

      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await createIndent(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await createIndent(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await createIndent(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("POST /indent/store Api to create indent but missing required fields)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createIndent(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("POST /indent/store Api to create indent with incorrect indentSubmission status)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        indentStatus: "New Status",
        facilityCode: "DCKABL000",
        products: [
          {
            productId: "647f4063470115f79424148e",
            unitPerStrip: 2,
            noOfstrips: 5,
            totalUnit: 10,
          },
        ],
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createIndent(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Incorrect indent status"),
      })
    );
  });

  test("POST /indent/store Api to create indent with products that does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        indentStatus: "Draft",
        facilityCode: "DCKABL000",
        products: [
          {
            productId: "647f4063470115f79424148e",
            unitPerStrip: 5,
            noOfstrips: 2,
            totalUnit: 10,
          },
        ],
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createIndent(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Products doest exists"),
      })
    );
  });

  test("POST /indent/store Api to create indent where user details are not available in the token, i.e username)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.mSqu7S_ZkQdxPN2o3b59_KBoZxZ_2DHWDm-LnKWHLrI",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        indentStatus: "Draft",
        facilityCode: "DCKABL000",
        products: [
          {
            productId: productsId[0],
            unitPerStrip: 2,
            noOfstrips: 5,
            totalUnit: 5,
          },
        ],
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createIndent(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Failed to get the user",
    });
  });

  test("POST /indent/store Api to create indent when user does not have access to the facility)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.NRJS9VVwZ9uDuq3CRSQb4gOzhIW1UrKzF8LS8chane8",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        indentStatus: "Draft",
        facilityCode: "DCKABL000",
        products: [
          {
            productId: productsId[0],
            unitPerStrip: 2,
            noOfstrips: 5,
            totalUnit: 5,
          },
        ],
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createIndent(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "User does not have access to facility",
    });
  });

  test("POST /indent/store Api to create indent by FM)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        indentStatus: "Draft",
        facilityCode: "DCKABL000",
        products: [
          {
            productId: productsId[0],
            unitPerStrip: 2,
            noOfstrips: 5,
            totalUnit: 5,
          },
        ],
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createIndent(mockRequest, mockResponse);

    const { data } = mockResponse.json.mock.calls[0][0];
    newindentId = data.indent._id;

    expect(mockResponse.status).toHaveBeenCalledWith(201);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully created indent",
        data: expect.objectContaining({
          indent: expect.any(Object),
        }),
      })
    );
  });

  test("POST /indent/store Api to create indent with indent submitted status as submitted)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        indentStatus: "Submitted",
        facilityCode: "DCKABL000",
        products: [
          {
            productId: productsId[0],
            unitPerStrip: 2,
            noOfstrips: 5,
            totalUnit: 5,
          },
        ],
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createIndent(mockRequest, mockResponse);

    const { data } = mockResponse.json.mock.calls[0][0];
    newSubmittedIndent = data.indent._id;
    submittedIndentDetails = data.indent;
    expect(mockResponse.status).toHaveBeenCalledWith(201);

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully created indent",
        data: expect.objectContaining({
          indent: expect.any(Object),
        }),
      })
    );
  });
});

describe("Get All Indents API", () => {
  describe("User validations", () => {
    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getAllIndents(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getAllIndents(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getAllIndents(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("GET /get/all get all indents api without any required fields in filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllIndents(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Missing facilityCode",
    });
  });

  test("GET /get/all get all indents api without facility access)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.NRJS9VVwZ9uDuq3CRSQb4gOzhIW1UrKzF8LS8chane8",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: { facilityCode: "DCKABL000" },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllIndents(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(403);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "User does not have access to facility",
    });
  });

  test("GET /get/all get all indents api with incorrect indent status)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        indentStatus: 5,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllIndents(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Incorrect indent status",
    });
  });

  test("GET /get/all get all indents api with from date as future date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const nextDate = dayjs()
      .tz("Asia/Kolkata")
      .add(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        indentStatus: 1,
        fromDate: nextDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllIndents(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "From date cannot be a future date",
    });
  });

  test("GET /get/all get all indents api with todate as future date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const nextDate = dayjs()
      .tz("Asia/Kolkata")
      .add(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        indentStatus: 1,
        fromDate: currentDate,
        toDate: nextDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllIndents(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "To date cannot be a future date",
    });
  });

  test("GET /get/all get all indents api with todate but no from date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const nextDate = dayjs()
      .tz("Asia/Kolkata")
      .add(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        indentStatus: 1,
        toDate: nextDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllIndents(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "From date is missing",
    });
  });

  test("GET /get/all get all indents api with response as no indents)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        indentStatus: 2,
        toDate: currentDate,
        fromDate: previousDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllIndents(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no indent",
    });
  });

  test("GET /get/all get all indents api with actual indents status by FM)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        indentStatus: 1,
        toDate: currentDate,
        fromDate: previousDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllIndents(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Indents list",
        data: expect.objectContaining({
          indents: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all indents api with actual indents status by Org Admin)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        indentStatus: 1,
        toDate: currentDate,
        fromDate: previousDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllIndents(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Indents list",
        data: expect.objectContaining({
          indents: expect.any(Array),
        }),
      })
    );
  });
});

describe("Get Indent by Id", () => {
  describe("User validations", () => {
    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getIndentById(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getIndentById(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getIndentById(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("GET /get/id get indent api without any required fields)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getIndentById(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("GET /get/id get indent api without facility access)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.NRJS9VVwZ9uDuq3CRSQb4gOzhIW1UrKzF8LS8chane8",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        indentId: "648af77ebc426551f615f401",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getIndentById(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(403);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "User does not have access to facility",
    });
  });

  test("GET /get/id get all indents api when indent does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        indentId: "648af77ebc426551f615f401",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getIndentById(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Indent does not exist",
    });
  });

  test("GET /get/id get all indents api with indent id by FM)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        indentId: newindentId,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getIndentById(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Indent details",
        data: expect.objectContaining({
          indent: expect.any(Object),
        }),
      })
    );
  });

  test("GET /get/id get all indents api with indent id by Org Admin)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.ub_qDU561PAzFsUxu6Kvf8QsiKC81rdhIyN0A7RXi1Y",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        indentId: newindentId,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getIndentById(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Indent details",
        data: expect.objectContaining({
          indent: expect.any(Object),
        }),
      })
    );
  });
});

describe("Update Indent", () => {
  describe("User validations", () => {
    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getIndentById(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getIndentById(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getIndentById(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("POST /indent/update Missing required fields)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateIndent(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("POST /indent/update With required fields but no data to update)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        indentId: newindentId,
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateIndent(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no data to update",
    });
  });

  test("POST /indent/update No access to facility)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.NRJS9VVwZ9uDuq3CRSQb4gOzhIW1UrKzF8LS8chane8",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        indentId: newindentId,
        indentStatus: "Draft",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateIndent(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(403);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "User does not have access to facility",
    });
  });

  test("POST /indent/update Indent does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        indentId: "648af025844fee950768aae7",
        indentStatus: "Draft",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateIndent(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Indent does not exist",
    });
  });

  test("POST /indent/update By FM with incorrect indent status)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        indentId: newindentId,
        indentStatus: "new",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateIndent(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Incorrect indent status",
    });
  });

  test("POST /indent/update By FM when indent is alreay submitted trying to update the products)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        indentId: newSubmittedIndent,
        indentStatus: "Submitted",
        products: submittedIndentDetails.products,
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateIndent(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Indent cannot be updated",
    });
  });

  test("POST /indent/update By FM when Products does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        indentId: newindentId,
        indentStatus: "Draft",
        products: [
          {
            productId: "647f4063470115f79424148e",
            manufacturerName: "CIPLA",
            unitPerStrip: 2,
            noOfstrips: 5,
            totalUnit: 10,
            _id: "64904e66cfc8885a064e8ab6",
          },
        ],
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateIndent(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Products does not exist"),
      })
    );
  });

  test("POST /indent/update By Org Admin when the indent is in draft)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        indentId: newindentId,
        indentStatus: "Accept",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateIndent(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message:
        "Organization admin cannot update the indent that is not submitted",
    });
  });

  test("POST /indent/update By FM correct details)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        indentId: newindentId,
        indentStatus: "Submitted",
        products: submittedIndentDetails.products,
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateIndent(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully updated the Indent",
        data: expect.objectContaining({
          indent: expect.any(Object),
        }),
      })
    );
  });

  test("POST /indent/update By Org Admin when details as correct)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        indentId: newSubmittedIndent,
        indentStatus: "Accept",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateIndent(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully updated the Indent",
        data: expect.objectContaining({
          indent: expect.any(Object),
        }),
      })
    );
  });

  test("POST /indent/update By Org Admin when Indent is accepted or Rejected)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        indentId: newindentId,
        indentStatus: "Accept",
        products: [
          {
            productId: "647f4063470115f79424148e",
            manufacturerName: "CIPLA",
            unitPerStrip: 2,
            noOfstrips: 5,
            totalUnit: 10,
            _id: "64904e66cfc8885a064e8ab6",
          },
          {
            productId: "647f4063470115f79424144e",
            manufacturerName: "CIPLA",
            unitPerStrip: 2,
            noOfstrips: 5,
            totalUnit: 10,
            _id: "64904e66cfc8885a064e9ab6",
          },
        ],
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateIndent(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Only Indent products quantity can be updated",
    });
  });

  test("POST /indent/update By Org Admin when Indent is status is incorrect)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        indentId: newindentId,
        indentStatus: "Draft",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateIndent(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Incorrect indent status",
    });
  });

  test("POST /indent/update By FM when Indent is accepted or Rejected)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        indentId: newSubmittedIndent,
        indentStatus: "Draft",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateIndent(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Indent is already accepted or Rejected",
    });
  });

  test("POST /indent/update By Org Admin when Indent is accepted or Rejected)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        indentId: newSubmittedIndent,
        indentStatus: "Draft",
        products: submittedIndentDetails.products,
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateIndent(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Indent products cannot be updated once Accepted or Rejected",
    });
  });
});

/* --- Vendors Module ----*/

describe("Vendor Bulk upload API", () => {
  describe("User validations", () => {
    test("User with Role Facility Manager", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRkFDSUxJVFlfTUFOQUdFUiJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.dSMIKN3EeumP1ONgsAPDJhqo9GCGzCSbqaPqnfjWPKQ",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await bulkUploadVendors(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does have permission",
      });
    });

    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await bulkUploadVendors(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await bulkUploadVendors(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await bulkUploadVendors(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does have permission",
      });
    });
  });

  test("POST /Create vendors api without a file in request", async () => {
    interface CustomFile extends File {
      buffer: Buffer;
      fieldname: string;
      originalname: string;
      encoding: string;
      mimetype: string;
      size: number;
      destination: string;
      filename: string;
      path: string;
      stream: any;
    }
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      file: CustomFile;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await bulkUploadVendors(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Missing file",
    });
  });

  test("POST /Create vendors api with file but not CSV (File validation for CSV)", async () => {
    const workbook = new Workbook();
    const worksheet = workbook.addWorksheet("Sheet 1");
    worksheet.addRow(["Vendor 1"]);
    worksheet.addRow(["Vendor 2"]);
    const excelBuffer = await workbook.xlsx.writeBuffer();

    interface CustomFile extends File {
      buffer: Buffer;
      fieldname: string;
      originalname: string;
      encoding: string;
      mimetype: string;
      size: number;
      destination: string;
      filename: string;
      path: string;
      stream: any;
    }
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      file: CustomFile;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
      },
      file: {
        buffer: excelBuffer,
      } as CustomFile,
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await bulkUploadVendors(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Vendor file Should be a CSV file",
    });
  });

  test("POST /Create vendors api with file but missing fields)", async () => {
    const csvContent: string =
      "vendorId,vendorName,bankName,accountNumber,IFSC,status,addressSiteName,floorNumber,streetName,streetNumber,district,postalCode,town,state,country,telecom,email\n" +
      "cap,gname,P453,h54,skuValue,active,Cip,,,5,5 1\n" +
      ",,,,,,,,,, 2\n";

    const csvBuffer: Buffer = Buffer.from(csvContent, "utf-8");

    interface CustomFile extends File {
      buffer: Buffer;
      fieldname: string;
      originalname: string;
      encoding: string;
      mimetype: string;
      size: number;
      destination: string;
      filename: string;
      path: string;
      stream: any;
    }
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      file: CustomFile;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
      },
      file: {
        fieldname: "csvFile",
        originalname: "example.csv",
        encoding: "utf-8",
        mimetype: "text/csv",
        buffer: csvBuffer,
        size: csvBuffer.length,
      } as CustomFile,
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await bulkUploadVendors(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing data from rows"),
      })
    );
  });

  test("POST /Create vendors api with file but no data)", async () => {
    const csvContent: string =
      "vendorId,vendorName,bankName,accountNumber,IFSC,status,addressSiteName,floorNumber,streetName,streetNumber,district,postalCode,town,state,country,telecom,email\n";

    const csvBuffer: Buffer = Buffer.from(csvContent, "utf-8");

    interface CustomFile extends File {
      buffer: Buffer;
      fieldname: string;
      originalname: string;
      encoding: string;
      mimetype: string;
      size: number;
      destination: string;
      filename: string;
      path: string;
      stream: any;
    }
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      file: CustomFile;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
      },
      file: {
        fieldname: "csvFile",
        originalname: "example.csv",
        encoding: "utf-8",
        mimetype: "text/csv",
        buffer: csvBuffer,
        size: csvBuffer.length,
      } as CustomFile,
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await bulkUploadVendors(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no data in the file",
    });
  });

  test("POST /Create vendors api with file but incorrect vendor status)", async () => {
    const csvContent: string =
      "vendorId,vendorName,bankName,accountNumber,IFSC,status,addressSiteName,floorNumber,streetName,streetNumber,district,postalCode,town,state,country,telecom,email\n" +
      "V23064521,abc,SBI,1234567890,SBIJ0003518,Activee,2ndMain,2,2ndMain,2,Bangalore,789456,HSR,Karnataka,India,7894561230,cipla@gmail.com\n";

    const csvBuffer: Buffer = Buffer.from(csvContent, "utf-8");

    interface CustomFile extends File {
      buffer: Buffer;
      fieldname: string;
      originalname: string;
      encoding: string;
      mimetype: string;
      size: number;
      destination: string;
      filename: string;
      path: string;
      stream: any;
    }
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      file: CustomFile;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
      },
      file: {
        fieldname: "csvFile",
        originalname: "example.csv",
        encoding: "utf-8",
        mimetype: "text/csv",
        buffer: csvBuffer,
        size: csvBuffer.length,
      } as CustomFile,
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await bulkUploadVendors(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Incorrect data"),
      })
    );
  });

  test("POST /Create vendors api with file and correct vendor details)", async () => {
    const csvContent: string =
      "vendorId,vendorName,bankName,accountNumber,IFSC,status,addressSiteName,floorNumber,streetName,streetNumber,district,postalCode,town,state,country,telecom,email\n" +
      "V23064521,abc,SBI,1234567890,SBIJ0003518,Active,2ndMain,2,2ndMain,2,Bangalore,789456,HSR,Karnataka,India,7894561230,cipla@gmail.com";

    const csvBuffer: Buffer = Buffer.from(csvContent, "utf-8");

    interface CustomFile extends File {
      buffer: Buffer;
      fieldname: string;
      originalname: string;
      encoding: string;
      mimetype: string;
      size: number;
      destination: string;
      filename: string;
      path: string;
      stream: any;
    }
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      file: CustomFile;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      file: {
        fieldname: "csvFile",
        originalname: "example.csv",
        encoding: "utf-8",
        mimetype: "text/csv",
        buffer: csvBuffer,
        size: csvBuffer.length,
      } as CustomFile,
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await bulkUploadVendors(mockRequest, mockResponse);
    const { data } = mockResponse.json.mock.calls[0][0];
    newvendorId = data.vendors[0];

    expect(mockResponse.status).toHaveBeenCalledWith(201);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Vendors added successfully",
        data: expect.objectContaining({
          vendors: expect.any(Object),
        }),
      })
    );
  });
});

describe("Vendor Update API", () => {
  describe("User validations", () => {
    test("User with Role Facility Manager", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRkFDSUxJVFlfTUFOQUdFUiJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.dSMIKN3EeumP1ONgsAPDJhqo9GCGzCSbqaPqnfjWPKQ",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updateVendor(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does have permission",
      });
    });

    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updateVendor(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updateVendor(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updateVendor(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does have permission",
      });
    });
  });

  test("POST /update vendors api missing vendorId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
      },
      body: JSON.stringify({}),
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateVendor(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("POST /update vendors api with incorrect vendorId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: { vendorId: "647f4063470115f79424158e" },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateVendor(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Vendor does not exist",
    });
  });

  test("POST /update vendors api with vendorId but no other details/fields to update", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: { vendorId: newvendorId._id },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateVendor(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: expect.stringContaining("There is no data to update"),
    });
  });

  test("POST /update vendors api with incorrect vendor status)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        vendorId: newvendorId._id,
        status: "nactive",
        vendorName: "Cipla",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateVendor(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Incorrect vendor status",
    });
  });

  test("POST /update vendors api with all correct vendor details)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        vendorId: newvendorId._id,
        vendorName: "Cipla",
        bankName: "SBI",
        accountNumber: "231245897562",
        IFSC: "SBIN0008995",
        status: "Active",
        addressSiteName: "#303,Jayanagar",
        floorNumber: 3,
        streetName: "2nd Main",
        streetNumber: 2,
        district: "Bangalore",
        postalCode: "540059",
        town: "Bangalore",
        state: "Karnataka",
        country: "India",
        telecom: 9876543210,
        email: "cipla@gmail.com",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateVendor(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully updated vendor details",
        data: expect.objectContaining({
          vendors: expect.any(Object),
        }),
      })
    );
  });
});

describe("Vendor Get All vendors API", () => {
  test("GET /get/all get all vendors api when vendor doest exist with the given filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        vendorName: "Cipla",
        status: 0,
        vendorId: "12354687gf15684csd5sed5f4",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllVendors(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no vendor",
    });
  });

  test("GET /get/all get all vendors api with incorrect vendor status filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        vendorName: "Cipla",
        status: 3,
        vendorId: "12354687gf15684csd5sed5f4",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllVendors(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Incorect status",
    });
  });

  test("GET /get/all get all vendors api with correct vendor status filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        vendorName: "Cipla",
        status: 0,
        vendorId: newvendorId.vendorId,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllVendors(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Vendors list",
        data: expect.objectContaining({
          vendors: expect.any(Array),
        }),
      })
    );
  });
});

describe("Vendor Get vendor by Id API", () => {
  test("GET /get/id Api when missing vendorId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getVendorId(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Missing vendorId",
    });
  });

  test("GET /get/id when vendor does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        vendorId: "647f4063470115f79424148e",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getVendorId(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Vendor does not exist",
    });
  });

  test("GET /get/id With correct vendorId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        vendorId: newvendorId._id,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getVendorId(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Vendor details",
        data: expect.objectContaining({
          vendor: expect.any(Object),
        }),
      })
    );
  });
});

/* --- Purchase Order Module ----*/

describe("Create PO", () => {
  describe("User validations", () => {
    test("User with Role Facility Manager", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRkFDSUxJVFlfTUFOQUdFUiJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.dSMIKN3EeumP1ONgsAPDJhqo9GCGzCSbqaPqnfjWPKQ",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await createPurchaseOrder(mockRequest, mockResponse);

      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await createPurchaseOrder(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await createPurchaseOrder(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await createPurchaseOrder(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("POST /purchase-order/store Missing required fields)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createPurchaseOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("POST /purchase-order/store when Indent ReferenceId is not an objectId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        indentReferenceId: "Abc2565",
        indentId: "I06205790",
        facilityCode: "DCKABL000",
        totalAmount: 250,
        products: [
          {
            productId: submittedIndentDetails.products[0].productId,
            unitsPerStrip: 1,
            totalStrips: 5,
            pricePerStrip: 50,
            totalUnits: 5,
            totalAmount: 250,
          },
        ],
        paymentStatus: "Due",
        vendorId: "6491b305395b30e98b7f1d76",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createPurchaseOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Indent ReferenceId is not an objectId",
    });
  });

  test("POST /purchase-order/store when VendorId is not an objectId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        indentReferenceId: "6491b305395b30e98b7f1d76",
        indentId: "I06205790",
        facilityCode: "DCKABL000",
        totalAmount: 250,
        products: [
          {
            productId: submittedIndentDetails.products[0].productId,
            unitsPerStrip: 1,
            totalStrips: 5,
            pricePerStrip: 50,
            totalUnits: 5,
            totalAmount: 250,
          },
        ],
        paymentStatus: "Due",
        vendorId: "Abcsld5456",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createPurchaseOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Vendor Id is not an objectId",
    });
  });

  test("POST /purchase-order/store empty products)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        indentReferenceId: newSubmittedIndent,
        indentId: submittedIndentDetails.indentRequestId,
        facilityCode: "DCKABL000",
        totalAmount: 250,
        products: [],
        paymentStatus: "Due",
        vendorId: newvendorId._id,
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createPurchaseOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Missing products",
    });
  });

  test("POST /purchase-order/store with product id missing from products)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        indentReferenceId: newSubmittedIndent,
        indentId: submittedIndentDetails.indentRequestId,
        facilityCode: "DCKABL000",
        totalAmount: 250,
        products: [
          {
            unitsPerStrip: 1,
            totalStrips: 5,
            pricePerStrip: 50,
            totalUnits: 5,
            totalAmount: 250,
          },
        ],
        paymentStatus: "Due",
        vendorId: newvendorId._id,
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createPurchaseOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("POST /purchase-order/store with correct indent but incorrect products)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        indentReferenceId: newSubmittedIndent,
        indentId: submittedIndentDetails.indentRequestId,
        facilityCode: "DCKABL000",
        totalAmount: 250,
        products: [
          {
            productId: "649149b06d0d947b762c4eba",
            unitsPerStrip: 1,
            totalStrips: 5,
            pricePerStrip: 50,
            totalUnits: 5,
            totalAmount: 250,
          },
        ],
        paymentStatus: "Due",
        vendorId: newvendorId._id,
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createPurchaseOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Products does not exist"),
      })
    );
  });

  test("POST /purchase-order/store with correct incorrect payment status)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        indentReferenceId: newSubmittedIndent,
        indentId: submittedIndentDetails.indentRequestId,
        facilityCode: "DCKABL000",
        totalAmount: 250,
        products: [
          {
            productId: submittedIndentDetails.products[0].productId.toString(),
            unitsPerStrip: 1,
            totalStrips: 5,
            pricePerStrip: 50,
            totalUnits: 5,
            totalAmount: 250,
          },
        ],
        paymentStatus: "Duesss",
        vendorId: newvendorId._id,
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createPurchaseOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Incorrect paymentStatus"),
      })
    );
  });

  test("POST /purchase-order/store when indent does not exists)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        indentReferenceId: "6491b305395b30e98b7f1d76",
        indentId: "I06205790",
        facilityCode: "DCKABL000",
        totalAmount: 250,
        products: [
          {
            productId: submittedIndentDetails.products[0].productId.toString(),
            unitsPerStrip: 1,
            totalStrips: 5,
            pricePerStrip: 50,
            totalUnits: 5,
            totalAmount: 250,
          },
        ],
        paymentStatus: "Due",
        vendorId: "6491b305395b30e98b7f1d76",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createPurchaseOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Indent does not exist",
    });
  });

  test("POST /purchase-order/store when vendor does not exists)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        indentReferenceId: newSubmittedIndent.toString(),
        indentId: submittedIndentDetails.indentRequestId,
        facilityCode: "DCKABL000",
        totalAmount: 250,
        products: [
          {
            productId: submittedIndentDetails.products[0].productId.toString(),
            unitsPerStrip: 1,
            totalStrips: 5,
            pricePerStrip: 50,
            totalUnits: 5,
            totalAmount: 250,
          },
        ],
        paymentStatus: "Due",
        vendorId: "6491b305395b30e98b7f1d76",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createPurchaseOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Vendor does not exist",
    });
  });

  test("POST /purchase-order/store when products in request are not the products from indent)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        indentReferenceId: newSubmittedIndent.toString(),
        indentId: submittedIndentDetails.indentRequestId.toString(),
        facilityCode: "DCKABL000",
        totalAmount: 250,
        products: [
          {
            productId: productsId[1].toString(),
            unitsPerStrip: 1,
            totalStrips: 5,
            pricePerStrip: 50,
            totalUnits: 5,
            totalAmount: 250,
          },
        ],
        paymentStatus: "Due",
        vendorId: newvendorId._id.toString(),
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createPurchaseOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Products does not match"),
      })
    );
  });

  test("POST /purchase-order/store with correct details)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        indentReferenceId: newSubmittedIndent.toString(),
        indentId: submittedIndentDetails.indentRequestId,
        facilityCode: "DCKABL000",
        totalAmount: 250,
        products: [
          {
            productId: submittedIndentDetails.products[0].productId.toString(),
            unitsPerStrip: 1,
            totalStrips: 5,
            pricePerStrip: 50,
            totalUnits: 5,
            totalAmount: 250,
          },
        ],
        paymentStatus: "Due",
        vendorId: newvendorId._id.toString(),
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createPurchaseOrder(mockRequest, mockResponse);
    const { data } = mockResponse.json.mock.calls[0][0];
    newPODetails = data.purchaseOrder;

    expect(mockResponse.status).toHaveBeenCalledWith(201);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully created the purchase order",
        data: expect.objectContaining({
          purchaseOrder: expect.any(Object),
        }),
      })
    );
  });
});

describe("Get All PO API", () => {
  describe("User validations", () => {
    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getAllPurchaseOrders(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getAllPurchaseOrders(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getAllPurchaseOrders(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("GET /get/all get all PO api without any required fields in filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllPurchaseOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Missing facilityCode",
    });
  });

  test("GET /get/all get all PO api with incorrect PO status)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        poOrderStatus: 5,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllPurchaseOrders(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "poOrderStatus is incorrect",
    });
  });

  test("GET /get/all get all PO api with from date as future date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const nextDate = dayjs()
      .tz("Asia/Kolkata")
      .add(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        poOrderStatus: 1,
        fromDate: nextDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllPurchaseOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "From date cannot be a future date",
    });
  });

  test("GET /get/all get all PO api with todate as future date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const nextDate = dayjs()
      .tz("Asia/Kolkata")
      .add(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        poOrderStatus: 1,
        fromDate: currentDate,
        toDate: nextDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllPurchaseOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "To date cannot be a future date",
    });
  });

  test("GET /get/all get all PO api with todate but no from date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const nextDate = dayjs()
      .tz("Asia/Kolkata")
      .add(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        poOrderStatus: 1,
        toDate: nextDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllPurchaseOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "From date is missing",
    });
  });

  test("GET /get/all get all PO api with response as no PO)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        poOrderStatus: 2,
        toDate: currentDate,
        fromDate: previousDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllPurchaseOrders(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no purchase order",
    });
  });

  test("GET /get/all get all PO when vendorId is not an objectID)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        vendorId: "ABF54651",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllPurchaseOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "vendorId is not an objectId",
    });
  });

  test("GET /get/all get all PO when vendorId is not an objectID)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        vendorId: newvendorId._id.toString(),
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllPurchaseOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Purchase Orders list",
        data: expect.objectContaining({
          purchaseOrders: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all PO api with correct details)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        poOrderStatus: 0,
        toDate: currentDate,
        fromDate: previousDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllPurchaseOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Purchase Orders list",
        data: expect.objectContaining({
          purchaseOrders: expect.any(Array),
        }),
      })
    );
  });
});

describe("Get PO API", () => {
  describe("User validations", () => {
    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getPurchaseOrderById(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getPurchaseOrderById(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getPurchaseOrderById(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("GET /purchase-order/get/id get PO api without any required fields in filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getPurchaseOrderById(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("GET /purchase-order/get/id get PO api when Purchase order does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        purchaseOrderId: "647f4063470115f79424148e",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getPurchaseOrderById(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Purchase order does not exist",
    });
  });

  test("GET /purchase-order/get/id with correct details)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        purchaseOrderId: newPODetails._id,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getPurchaseOrderById(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Purchase Order details",
        data: expect.objectContaining({
          purchaseOrder: expect.any(Object),
        }),
      })
    );
  });
});

describe("Patch PO API", () => {
  describe("User validations", () => {
    test("User with Role Facility Manager", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRkFDSUxJVFlfTUFOQUdFUiJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.dSMIKN3EeumP1ONgsAPDJhqo9GCGzCSbqaPqnfjWPKQ",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updatePurchaseOrder(mockRequest, mockResponse);

      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updatePurchaseOrder(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updatePurchaseOrder(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updatePurchaseOrder(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("Patch /purchase-order/update update PO api without any required fields in filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updatePurchaseOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("Patch /purchase-order/update update PO api when Purchase order does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        purchaseOrderId: "647f4063470115f79424148e",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updatePurchaseOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Purchase order does not exist",
    });
  });

  test("Patch /purchase-order/update with required fields but no data to update)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        purchaseOrderId: newPODetails._id,
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updatePurchaseOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no data to update",
    });
  });

  test("Patch /purchase-order/update with incorrect order status)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        purchaseOrderId: newPODetails._id,
        poOrderStatus: "new Order",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updatePurchaseOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Incorrect purchase order status",
    });
  });

  test("Patch /purchase-order/update with incorrect payment status)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        purchaseOrderId: newPODetails._id,
        paymentStatus: "new",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updatePurchaseOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Incorrect paymentStatus",
    });
  });

  test("Patch /purchase-order/update with empty products array)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        purchaseOrderId: newPODetails._id,
        products: [],
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updatePurchaseOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Products is empty",
    });
  });

  test("Patch /purchase-order/update with products that does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        purchaseOrderId: newPODetails._id,
        products: [
          {
            productId: "647f4063470115f79424148e",
            totalStrips: 2,
            pricePerStrip: 5,
            totalUnits: 10,
            totalAmount: 10,
          },
        ],
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updatePurchaseOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Products does not exist"),
      })
    );
  });

  test("Patch /purchase-order/update with products but missing fields within the product)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        purchaseOrderId: newPODetails._id,
        products: [
          {
            productId: newPODetails.products[0].productId.toString(),
            totalStrips: 2,
            totalAmount: 10,
          },
        ],
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updatePurchaseOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("Patch /purchase-order/update with correct details)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        facilityCode: "DCKABL000",
        purchaseOrderId: newPODetails._id,
        products: [
          {
            productId: newPODetails.products[0].productId,
            totalStrips: 2,
            pricePerStrip: 5,
            totalUnits: 10,
            totalAmount: 10,
            unitsPerStrip: 5,
          },
        ],
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updatePurchaseOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully updated the Purchase order",
        data: expect.objectContaining({
          purchaseOrder: expect.any(Object),
        }),
      })
    );
  });
});

describe("Get PO By Indent API", () => {
  describe("User validations", () => {
    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getPurchaseOrderByIndentId(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getPurchaseOrderByIndentId(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getPurchaseOrderByIndentId(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("GET /purchase-order/indent/get without any required fields)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getPurchaseOrderByIndentId(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("GET /purchase-order/indent/get When Indent order does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        indentReferenceId: "647f4063470115f79424148e",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getPurchaseOrderByIndentId(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Indent does not exist",
    });
  });

  test("GET /purchase-order/indent/get With correct details)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        indentReferenceId: newPODetails.indentReferenceId,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getPurchaseOrderByIndentId(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Purchase Orders",
        data: expect.objectContaining({
          purchaseOrders: expect.any(Array),
        }),
      })
    );
  });
});

describe("Search PO By readable ID API", () => {
  describe("User validations", () => {
    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getPurchaseOrderByIndentId(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getPurchaseOrderByIndentId(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getPurchaseOrderByIndentId(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("GET /purchase-order/search without any required fields)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await searchPurchaseOrderByReadableId(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("GET /purchase-order/search When PO does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        purchaseOrderId: "64b1491f8cd7faed5e78fd07",
        facilityCode: "DCKABL000",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await searchPurchaseOrderByReadableId(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Purchase order does not exist",
    });
  });

  test("GET /purchase-order/search With correct details)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        purchaseOrderId: newPODetails.purchaseOrderId,
        facilityCode: "DCKABL000",
      },
      query: {
        facilityCode: "DCKABL000",
        indentReferenceId: newPODetails.indentReferenceId,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await searchPurchaseOrderByReadableId(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Purchase Order",
        data: expect.objectContaining({
          purchaseOrder: expect.any(Object),
        }),
      })
    );
  });
});

/* --- Consumer Functions ----*/
// describe('Consume and add Facility', () => {
//     test('Missing realm name in the consumed data', async () => {
//         interface CustomRequest extends Request {
//             cache: any;
//             credentials: any;
//             destination: any;
//             integrity: any;
//             keepalive: any;
//             mode: any;
//             redirect: any;
//             referrer: any;
//             referrerPolicy: any;
//             signal: any;
//             clone: any;
//             bodyUsed: any;
//             arrayBuffer: any;
//             blob: any;
//             formData: any;
//             json: any;
//             text: any;
//             headers: any;
//             query: any;
//             // Add other missing properties here
//         }

//         interface CustomResponse extends Response {
//             headers: any;
//             ok: any;
//             redirected: any;
//             statusText: any;
//             url: any;
//             clone: any;
//             body: any;
//             bodyUsed: any;
//             arrayBuffer: any;
//             blob: any;
//             formData: any;
//             text: any;
//             status: any;
//             type: any;
//             json: any;
//         }

//         const mockRequest: CustomRequest = {
//             headers: {
//                 authorization:
//                     'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o',
//                 realm: '',
//                 dynamicdb: modelConnectionsToHeader
//             },
//             body: {},
//             query: {}
//         } as CustomRequest;

//         const mockResponse: CustomResponse = {
//             json: jest.fn(),
//             status: jest.fn().mockReturnThis()
//             // Add other missing properties here
//         } as CustomResponse;

//         const result = await addFacility(mockRequest);
//         expect(result).toBe(false);
//     });

//     /*
//     test('Add facility with the correct details', async () => {
//         interface CustomRequest extends Request {
//             cache: any;
//             credentials: any;
//             destination: any;
//             integrity: any;
//             keepalive: any;
//             mode: any;
//             redirect: any;
//             referrer: any;
//             referrerPolicy: any;
//             signal: any;
//             clone: any;
//             bodyUsed: any;
//             arrayBuffer: any;
//             blob: any;
//             formData: any;
//             json: any;
//             text: any;
//             headers: any;
//             query: any;
//             // Add other missing properties here
//         }

//         interface CustomResponse extends Response {
//             headers: any;
//             ok: any;
//             redirected: any;
//             statusText: any;
//             url: any;
//             clone: any;
//             body: any;
//             bodyUsed: any;
//             arrayBuffer: any;
//             blob: any;
//             formData: any;
//             text: any;
//             status: any;
//             type: any;
//             json: any;
//         }

//         const mockRequest: CustomRequest = {
//             headers: {
//                 authorization:
//                     'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk9SR0FOSVpBVElPTl9BRE1JTiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIlJlYWQiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJSZWFkIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJSZWFkIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiXX0sIkNIV01hbmFnZW1lbnQiOnsiY2h3UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl0sImNod0F0dGVuZGVuY2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiQ29uc3VsdGF0aW9uIjp7ImNvbnN1bHRhdGlvbkRldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIlJlYWQiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZERldGFpbHMiOlsiUmVhZCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2RlIjpbIlNDV0JOUzAwMCIsIkRDS0FCTDAwMCJdfSwiT25ib2FyZGluZyI6eyJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwgdWlkIiwic2lkIjoiNTg3MWQ5NGQtMjY0Ni00YTIzLTg4YzMtN2JkYjc3N2Q2ZGZjIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6Ijk2ODE5MTUyNTUiLCJnaXZlbl9uYW1lIjoiS2FuaWthIiwiZmFtaWx5X25hbWUiOiJEYXMiLCJlbWFpbCI6ImRhc2thbmlrYTMzN0BnbWFpbC5jb20ifQ.NvPSZ_44fuZ-mo14oYKO2RiXCHupglAbqtw8oUi1F0o',
//                 realm: '',
//                 dynamicdb: modelConnectionsToHeader
//             },
//             body: {
//                 status: true,
//                 facilityFirstName: 'Kadaba',
//                 facilityLastName: 'Clinic',
//                 facilityCode: 'KCKAKD000',
//                 address: {
//                     addressLines: {
//                         addressSiteName: 'Kadaba',
//                         floorNumber: '',
//                         streetName: '',
//                         streetNumber: ''
//                     },
//                     district: 'Kadaba',
//                     districtCode: 'KD',
//                     postalCode: '561550',
//                     town: 'Kadaba',
//                     state: 'Karnataka',
//                     stateCode: 'KA',
//                     country: 'India'
//                 },
//                 organizationId: 'ikure',
//                 email: 'kadaba@ikurein',
//                 telecom: '8606027000',
//                 realmName: 'ikure'
//             },
//             query: {}
//         } as CustomRequest;

//         const mockResponse: CustomResponse = {
//             json: jest.fn(),
//             status: jest.fn().mockReturnThis()
//             // Add other missing properties here
//         } as CustomResponse;

//         const result = await addFacility(mockRequest);
//         expect(result).toBe(true);
//     });*/
// });

/* --- GRN Module ----*/

describe("Create GRN API", () => {
  describe("User validations", () => {
    test("User with Role Organization Admin", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await createGRN(mockRequest, mockResponse);

      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await createGRN(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await createGRN(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await createGRN(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("POST /grn/store Api to create grn but missing required fields)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: { facilityCode: "DCKABL000" },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createGRN(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("POST /grn/store Api to create grn when user does not have access to the facility)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }
    const products: any = [
      {
        productId: newproductId,
        status: "Active",
        batch: "123456",
        expiry: "20-12-2023",
        vendor: newvendorId,
        unitsPerStrip: 10,
        totalQuantity: 20,
        freeQuantity: 5,
        rackNo: "A",
        boxNo: "1",
        GST: 4,
        IGST: 0,
        CGST: 2,
        SGST: 2,
        pricePerUnit: 8,
        ratePerUnit: 10,
        discount: 1,
      },
    ];
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.NRJS9VVwZ9uDuq3CRSQb4gOzhIW1UrKzF8LS8chane8",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        status: "Active",
        facilityCode: "DCKABL000",
        purchaseOrderId: "P23068526",
        products: JSON.stringify([
          {
            productId: newproductId,
            status: "Active",
            batch: "123456",
            expiry: "20-12-2023",
            vendor: newvendorId,
            unitsPerStrip: 10,
            totalQuantity: 20,
            freeQuantity: 5,
            rackNo: "A",
            boxNo: "1",
            GST: 4,
            IGST: 0,
            CGST: 2,
            SGST: 2,
            pricePerUnit: 8,
            ratePerUnit: 10,
            discount: 1,
          },
        ]),
      },
      query: {},
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createGRN(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "User does not have access to facility",
    });
  });

  test("POST /grn/store Api to create grn with purchase order that does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        status: "Active",
        facilityCode: "DCKABL000",
        purchaseOrderId: "P23068526",
        products: JSON.stringify([
          {
            productId: newproductId,
            status: "Active",
            batch: "123456",
            expiry: "20-12-2023",
            vendor: newvendorId,
            unitsPerStrip: 10,
            totalQuantity: 20,
            freeQuantity: 5,
            rackNo: "A",
            boxNo: "1",
            GST: 4,
            IGST: 0,
            CGST: 2,
            SGST: 2,
            pricePerUnit: 8,
            ratePerUnit: 10,
            discount: 1,
          },
        ]),
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createGRN(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Purchase Order does not exist"),
      })
    );
  });

  test("POST /grn/store Api to create grn with products that does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        status: "Active",
        facilityCode: "DCKABL000",
        purchaseOrderId: newPODetails.purchaseOrderId,
        products: JSON.stringify([
          {
            productId: "629b29200120f484e490bcb2",
            status: "Active",
            batch: "123456",
            expiry: "20-12-2023",
            vendor: newvendorId,
            unitsPerStrip: 10,
            totalQuantity: 20,
            freeQuantity: 5,
            rackNo: "A",
            boxNo: "1",
            GST: 4,
            IGST: 0,
            CGST: 2,
            SGST: 2,
            pricePerUnit: 8,
            ratePerUnit: 10,
            discount: 1,
          },
        ]),
        vendorId: newvendorId.vendorId,
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createGRN(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Product does not exist for GRN"),
      })
    );
  });

  test("POST /grn/store Api to create GRN)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        status: "Active",
        facilityCode: "DCKABL000",
        purchaseOrderId: newPODetails.purchaseOrderId,
        products: JSON.stringify([
          {
            productId: newproductId,
            status: "Active",
            batch: "123456",
            expiry: "2023-12-20",
            vendor: newvendorId._id,
            unitsPerStrip: 10,
            totalQuantity: 20,
            freeQuantity: 5,
            rackNo: "A",
            boxNo: "1",
            GST: 4,
            IGST: 0,
            CGST: 2,
            SGST: 2,
            pricePerUnit: 8,
            ratePerUnit: 10,
            discount: 1,
          },
        ]),
        vendorId: newvendorId.vendorId,
        paymentStatus: "Paid",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createGRN(mockRequest, mockResponse);
    const { data } = mockResponse.json.mock.calls[0][0];
    newgrnId = data.grn._id;
    grnDetails = data.grn;
    inventory = data.inventory;
    expect(mockResponse.status).toHaveBeenCalledWith(201);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully created GRN",
        data: expect.objectContaining({
          grn: expect.any(Object),
          inventory: expect.any(Object),
        }),
      })
    );
  });
});

describe("Get All GRN API", () => {
  describe("User validations", () => {
    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getAllGRN(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getAllGRN(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getAllGRN(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("GET /get/all get all GRN api without any required fields in filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllGRN(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Missing facilityCode",
    });
  });

  test("GET /get/all get all GRN api without facility access)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.NRJS9VVwZ9uDuq3CRSQb4gOzhIW1UrKzF8LS8chane8",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: { facilityCode: "DCKABL000" },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllGRN(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(403);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "User does not have access to facility",
    });
  });

  test("GET /get/all get all GRN api with from date as future date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const nextDate = dayjs()
      .tz("Asia/Kolkata")
      .add(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        status: 1,
        fromDate: nextDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllGRN(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "From date cannot be a future date",
    });
  });

  test("GET /get/all get all GRN api with todate as future date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const nextDate = dayjs()
      .tz("Asia/Kolkata")
      .add(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        status: 1,
        fromDate: currentDate,
        toDate: nextDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllGRN(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "To date cannot be a future date",
    });
  });

  test("GET /get/all get all GRN api with to date but no from date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const nextDate = dayjs()
      .tz("Asia/Kolkata")
      .add(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        status: 1,
        toDate: nextDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllGRN(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "From date is missing",
    });
  });

  test("GET /get/all get all GRN api with response as no GRN)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");
    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        status: 2,
        toDate: currentDate,
        fromDate: previousDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllGRN(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no GRN",
    });
  });
});

describe("Get GRN by Id", () => {
  describe("User validations", () => {
    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getGRNById(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getGRNById(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await getGRNById(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("GET /get/id get GRN api without any required fields)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getGRNById(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("GET /get/id get GRN api without facility access)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.NRJS9VVwZ9uDuq3CRSQb4gOzhIW1UrKzF8LS8chane8",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        purchaseOrderId: "648af77ebc426551f615f401",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getGRNById(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(403);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "User does not have access to facility",
    });
  });

  test("GET /get/id get GRN api when GRN does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        purchaseOrderId: "648af77ebc426551f615f401",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getGRNById(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "GRN does not exist",
    });
  });

  test("GET /get/id get GRN api with purchaseOrder id)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        purchaseOrderId: newPODetails.purchaseOrderId,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getGRNById(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "GRN details",
        data: expect.objectContaining({
          grn: expect.any(Object),
        }),
      })
    );
  });
});

describe("Update GRN", () => {
  describe("User validations", () => {
    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updateGRN(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updateGRN(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updateGRN(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("POST /grn/update Missing required fields)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateGRN(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("POST /grn/update No access to facility)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.NRJS9VVwZ9uDuq3CRSQb4gOzhIW1UrKzF8LS8chane8",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        status: "Active",
      },
      query: { grnId: newgrnId },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateGRN(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(403);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "User does not have access to facility",
    });
  });

  test("POST /grn/update grn does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        status: "Active",
        facilityCode: "DCKABL000",
      },
      query: { grnId: "648af025844fee950768aae7" },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateGRN(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "GRN does not exist",
    });
  });

  test("POST /grn/update GRN with correct details)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        status: "Active",
        facilityCode: "DCKABL000",
      },
      query: { grnId: newgrnId },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateGRN(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully updated the GRN",
        data: expect.objectContaining({
          grn: expect.any(Object),
        }),
      })
    );
  });
});

describe("Search GRN", () => {
  describe("User validations", () => {
    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await searchGRNByReadableId(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await searchGRNByReadableId(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await searchGRNByReadableId(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("POST /grn/search Missing grnId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await searchGRNByReadableId(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing grnId"),
      })
    );
  });

  test("POST /grn/search Missing facilityCode)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        grnId: "GRN1245",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await searchGRNByReadableId(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing facilityCode"),
      })
    );
  });

  test("POST /grn/search GRN when GRN does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        grnId: "A45325",
        facilityCode: "DCKABL000",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await searchGRNByReadableId(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "GRN does not exist",
    });
  });

  test("POST /grn/search GRN with correct details)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBEYXMiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6Imh0dHBzOi8vYXV0aC53aGltc2xpdmUuY29tL2F1dGgvcmVhbG1zL2lrdXJlIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkZBQ0lMSVRZX01BTkFHRVIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1pa3VyZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJSZWFkIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiUmVhZCJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiUmVhZCJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlBhdGllbnQiOnsicHJlc2NyaXB0aW9uIjpbIlJlYWQiLCJVcGRhdGUiXSwicGF0aWVudFNlcnZpY2VzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudFByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiVml0YWxzIjp7InZpdGFsc0NvbGxlY3Rpb24iOlsiQ3JlYXRlIiwiUmVhZCJdLCJ2aXRhbHNMaXN0IjpbIlJlYWQiXSwidml0YWxSYW5nZSI6WyJSZWFkIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmREZXRhaWxzIjpbIlJlYWQiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5Q29kZSI6WyJTQ1dCTlMwMDAiLCJEQ0tBQkwwMDAiXX0sIk9uYm9hcmRpbmciOnsicGF0aWVudE9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImRvY3Rvck9uYm9hcmRpbmciOlsiQ3JlYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHVpZCIsInNpZCI6IjU4NzFkOTRkLTI2NDYtNGEyMy04OGMzLTdiZGI3NzdkNmRmYyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5NjgxOTE1MjU1IiwiZ2l2ZW5fbmFtZSI6IkthbmlrYSIsImZhbWlseV9uYW1lIjoiRGFzIiwiZW1haWwiOiJkYXNrYW5pa2EzMzdAZ21haWwuY29tIn0.T7g_M3Q2wcY7pEtKRxXA1g-IwsnKKg4xCnYoLahNK4Q",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        grnId: grnDetails.grnId,
        facilityCode: "DCKABL000",
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await searchGRNByReadableId(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "GRN",
        data: expect.objectContaining({
          grn: expect.any(Object),
        }),
      })
    );
  });
});

/* --- Sales Order Module ----*/

describe("SalesOrder create API fro CHW", () => {
  describe("User validations", () => {
    test("User with Role Organization Admin", async () => {
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }
      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiT1JHQU5JWkFUSU9OX0FETUlOIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.JJSKp3j8A1nL07nmW3v9PJiRoa9nBddRloas3e9NM9w",
        },
        body: {
          customerType: 1,
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await createSalesOrders(mockRequest, mockResponse);

      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Doctor", async () => {
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
        body: {
          customerType: 1,
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await createSalesOrders(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
        body: {
          customerType: 1,
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await createSalesOrders(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  /* Sales order for CHW */
  test("POST /Create Sales Order api with missing fields)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("POST /Create Sales Order api missing customer type)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        uhid: 35638510414922,
        chwId: "CHW78945",
        facilityCode: "DCKABL000",
        deliveryStatus: "Order Placed",
        totalAmount: 100.0,
        paymentStatus: "Paid",
        products: JSON.stringify([
          {
            productId: "63171e29f34c24383a3736e8",
            quantity: 1,
          },
        ]),
        advanceReceived: 0,
        createdBy: "CHW78945",
        createdByRole: "CHW",
        type: "Facility",
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing customerType"),
      })
    );
  });

  test("POST /Create Sales Order api incorrect customer type)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 4,
        uhid: 35638510414922,
        chwId: "CHW78945",
        facilityCode: "DCKABL000",
        deliveryStatus: "Order Placed",
        totalAmount: 100.0,
        paymentStatus: "Paid",
        products: JSON.stringify([
          {
            productId: "63171e29f34c24383a3736e8",
            quantity: 1,
          },
        ]),
        advanceReceived: 0,
        createdBy: "CHW78945",
        createdByRole: "CHW",
        type: "Facility",
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Incorrect customerType"),
      })
    );
  });

  test("POST /Create Sales Order api with invalid Product Id)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 1,
        chwId: "CHW78945",
        facilityCode: "DCKABL000",
        deliveryStatus: "Order Placed",
        totalAmount: 100.0,
        paymentStatus: "Paid",
        products: JSON.stringify([
          {
            productId: "6492ca4bed54c79c3a5b99b5",
            batch: inventory[0].batch,
            GST: inventory[0].GST,
            IGST: inventory[0].IGST,
            CGST: inventory[0].CGST,
            SGST: inventory[0].SGST,
            totalQuantity: 2,
            ratePerUnit: inventory[0].ratePerUnit,
            discount: 0,
            totalPriceValue: 100,
            inventoryId: "64a3e9dc3a33f2c6c37b893c",
          },
        ]),
        advanceReceived: 0,
        createdBy: "CHW78945",
        createdByRole: "CHW",
        type: "Facility",
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Products does not exist"),
      })
    );
  });

  test("POST /Create Sales Order api with product quantity exceed the current stock quantity)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 1,
        chwId: "CHW78945",
        facilityCode: "DCKABL000",
        totalAmount: 16,
        products: JSON.stringify([
          {
            productId: inventory[0].productId.toString(),
            batch: inventory[0].batch,
            GST: inventory[0].GST,
            IGST: inventory[0].IGST,
            CGST: inventory[0].CGST,
            SGST: inventory[0].SGST,
            totalQuantity: 22,
            ratePerUnit: inventory[0].ratePerUnit,
            discount: 0,
            totalPriceValue: 176,
            inventoryId: inventory[0]._id.toString(),
          },
        ]),
        totalGST: 7.04,
        totalDiscount: 0,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining(
          "Product Quantity exceeds Inventory Quantity for"
        ),
      })
    );
  });

  test("POST /Create Sales Order api with total order amount and total product amounts are incorrect )", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 1,
        chwId: "CHW78945",
        facilityCode: "DCKABL000",
        totalAmount: 16,
        products: JSON.stringify([
          {
            productId: inventory[0].productId.toString(),
            batch: inventory[0].batch,
            GST: inventory[0].GST,
            IGST: inventory[0].IGST,
            CGST: inventory[0].CGST,
            SGST: inventory[0].SGST,
            totalQuantity: 2,
            ratePerUnit: inventory[0].ratePerUnit,
            discount: 0,
            totalPriceValue: 16,
            inventoryId: inventory[0]._id.toString(),
          },
        ]),
        totalGST: 0.64,
        totalDiscount: 0,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.arrayContaining([
          expect.stringMatching(/Total product price of.* is incorrect/),
          expect.stringContaining("Total sales order amount is incorrect"),
        ]),
      })
    );
  });

  test("POST /Create Sales Order api with all correct fields)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 1,
        chwId: "CHW78945",
        facilityCode: "DCKABL000",
        totalAmount: 20,
        products: JSON.stringify([
          {
            productId: inventory[0].productId.toString(),
            batch: inventory[0].batch,
            GST: inventory[0].GST,
            IGST: inventory[0].IGST,
            CGST: inventory[0].CGST,
            SGST: inventory[0].SGST,
            totalQuantity: 2,
            ratePerUnit: inventory[0].ratePerUnit,
            discount: 0,
            totalPriceValue: 20,
            inventoryId: inventory[0]._id.toString(),
          },
        ]),
        totalGST: 0.8,
        totalDiscount: 0,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);

    const { data } = mockResponse.json.mock.calls[0][0];
    // newsalesOrderId = data.salesOrder;

    newsalesOrderId = "S23064597";
    newSOCHW = mockResponse.json.mock.calls[0][0].data.salesOrder;

    expect(mockResponse.status).toHaveBeenCalledWith(201);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: expect.stringContaining("Sales Order created Successfully."),
        data: expect.objectContaining({
          salesOrder: expect.any(Object),
        }),
      })
    );
  });

  /* Sales order for Patient */
  test("POST /Create Sales Order missing order type)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 2,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing order type"),
      })
    );
  });

  test("POST /Create Sales Order incorrect order type)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 2,
        type: 5,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Incorrect order type"),
      })
    );
  });

  test("POST /Create Sales Order with correct order type but missing user details in the token)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwiZ2l2ZW5fbmFtZSI6IkFkbWluIiwiZmFtaWx5X25hbWUiOiJJa3VyZSIsImVtYWlsIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiJ9.idzkOko9wyMLQvYrDCC8Ch1V1wXuqdXQ32Cw6kGjoII",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 2,
        type: 1,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Failed to get the user"),
      })
    );
  });

  test("POST /Create Sales Order missing products)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 2,
        type: 1,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing products"),
      })
    );
  });

  test("POST /Create Sales Order advanceReceived is more than total order amount)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realmName: "ikure",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 2,
        type: 1,
        products: JSON.stringify([
          {
            productId: "647f4063470115f79424148e",
            batch: "45u",
            GST: 5,
            IGST: 0,
            CGST: 2.5,
            SGST: 2.5,
            totalQuantity: 1,
            ratePerUnit: 4,
            discount: 0,
            totalPriceValue: 4,
            inventoryId: "64b6802a811eaa3356e883a2",
          },
        ]),
        chwId: "CHW45124",
        facilityCode: "DCKABL000",
        totalAmount: 4,
        paymentStatus: "Paid",
        advanceReceived: 5,
        uhid: 36644353589322,
        totalGST: 0.2,
        totalDiscount: 0,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining(
          "Advance received in greater that total sales order amount"
        ),
      })
    );
  });

  test("POST /Create Sales Order products does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realmName: "ikure",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 2,
        type: 1,
        products: JSON.stringify([
          {
            productId: "647f4063470115f79424148e",
            batch: "45u",
            GST: 5,
            IGST: 0,
            CGST: 2.5,
            SGST: 2.5,
            totalQuantity: 1,
            ratePerUnit: 4,
            discount: 0,
            totalPriceValue: 4,
            inventoryId: "64b6802a811eaa3356e883a2",
          },
        ]),
        chwId: "CHW45124",
        facilityCode: "DCKABL000",
        totalAmount: 4,
        paymentStatus: "Paid",
        advanceReceived: 4,
        uhid: 36644353589322,
        totalGST: 0.2,
        totalDiscount: 0,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Products does not exist"),
      })
    );
  });

  test("POST /Create Sales Order inventory does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realmName: "ikure",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 2,
        type: 1,
        products: JSON.stringify([
          {
            productId: productsId[0],
            batch: "45u",
            GST: 5,
            IGST: 0,
            CGST: 2.5,
            SGST: 2.5,
            totalQuantity: 1,
            ratePerUnit: 4,
            discount: 0,
            totalPriceValue: 4,
            inventoryId: "64b6802a811eaa3356e883a2",
          },
        ]),
        chwId: "CHW45124",
        facilityCode: "DCKABL000",
        totalAmount: 4,
        paymentStatus: "Paid",
        advanceReceived: 4,
        uhid: 36644353589322,
        totalGST: 0.2,
        totalDiscount: 0,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Inventories does not exist"),
      })
    );
  });
});

describe("SalesOrder Update API", () => {
  describe("User validations", () => {
    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updateSalesOrders(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await updateSalesOrders(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("POST /update sales order api missing orderId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: JSON.stringify({}),
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("POST /update sales order api with incorrect orderId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        salesOrderReferenceId: "64b5024ce2f0788b5fc26b72",
        facilityCode: newSOCHW.facilityCode,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateSalesOrders(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Sales order does not exist",
    });
  });

  test("POST /update sales order api with orderId but no other details/fields to update", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        salesOrderReferenceId: newSOCHW._id,
        facilityCode: newSOCHW.facilityCode,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: expect.stringContaining("There is no data to update"),
    });
  });

  test("POST /update sales order api with incorrect product prices)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        salesOrderReferenceId: newSOCHW._id,
        facilityCode: newSOCHW.facilityCode,
        products: JSON.stringify([
          {
            productId: newSOCHW.products[0].productId,
            batch: newSOCHW.products[0].batch,
            GST: newSOCHW.products[0].GST,
            IGST: newSOCHW.products[0].IGST,
            CGST: newSOCHW.products[0].CGST,
            SGST: newSOCHW.products[0].SGST,
            totalQuantity: newSOCHW.products[0].totalQuantity,
            ratePerUnit: Number(newSOCHW.products[0].ratePerUnit) + 10,
            discount: newSOCHW.products[0].discount,
            totalPriceValue: 0,
            inventoryId: newSOCHW.products[0].inventoryId,
          },
        ]),
        totalAmount: newSOCHW.totalAmount,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateSalesOrders(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.arrayContaining([
          expect.stringMatching(/Total product price of.* is incorrect/),
          expect.stringContaining("Total sales order amount is incorrect"),
        ]),
      })
    );

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.arrayContaining([
          expect.stringMatching(/Total product price of.* is incorrect/),
          expect.stringContaining("Total sales order amount is incorrect"),
        ]),
      })
    );
  });

  test("POST /update sales order api with correct fields)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        salesOrderReferenceId: newSOCHW._id,
        facilityCode: newSOCHW.facilityCode,
        products: JSON.stringify([
          {
            productId: newSOCHW.products[0].productId,
            batch: newSOCHW.products[0].batch,
            GST: newSOCHW.products[0].GST,
            IGST: newSOCHW.products[0].IGST,
            CGST: newSOCHW.products[0].CGST,
            SGST: newSOCHW.products[0].SGST,
            totalQuantity: newSOCHW.products[0].totalQuantity,
            ratePerUnit: Number(newSOCHW.products[0].ratePerUnit),
            discount: newSOCHW.products[0].discount,
            totalPriceValue: newSOCHW.products[0].totalPriceValue,
            inventoryId: newSOCHW.products[0].inventoryId,
          },
        ]),
        totalAmount: newSOCHW.totalAmount,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateSalesOrders(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully updated SalesOrder details",
        data: expect.objectContaining({
          salesOrder: expect.any(Object),
        }),
      })
    );
  });

  test("POST /update sales order api FM confirmed order)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiRkFDSUxJVFlfTUFOQUdFUiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJPcmdhbml6YXRpb24iOnsib3JnYW5pemF0aW9uUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJSZXBvcnQiOnsicmVwb3J0TWFuYWdlbWVudCI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJDTVMiOnsiY21zUHJvcGVydGllcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJPcmdhbml6YXRpb25BZG1pbiI6eyJvcmdhbml6YXRpb25BZG1pblByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmRMaW1pdCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImhlYWx0aENhcmREZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIkRvY3RvciI6eyJkb2N0b3JTZXJ2aWNlcyI6WyJSZWFkIiwiVXBkYXRlIl0sImRvY3RvclByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiT25ib2FyZGluZyI6eyJmYWNpbGl0eU1hbmFnZXJPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJjaHdPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX0sIlByb2plY3QiOnsicHJvamVjdERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiQ29uc2VudCI6eyJjb25zZW50RGF0YSI6WyJSZWFkIiwiRGVsZXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIkRlbGV0ZSJdfSwiRmFjaWxpdHlNYW5hZ2VyIjp7ImZhY2lsaXR5TWFuYWdlclByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiQ0hXTWFuYWdlbWVudCI6eyJjaHdQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXSwiY2h3QXR0ZW5kZW5jZSI6WyJSZWFkIl19LCJDb25zdWx0YXRpb24iOnsiY29uc3VsdGF0aW9uRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5T25ib2FyZGluZyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIiwic2lkIjoiMzIzZmQ0MWYtY2Q2ZC00OWYzLThiNGYtNGU2MDczMGQ2NWM0IiwiZW1haWxfdmVyaWZpZWQiOnRydWUsIm5hbWUiOiJBZG1pbiBJa3VyZSIsInByZWZlcnJlZF91c2VybmFtZSI6ImFkbWluaWt1cmVAaWt1cmUuaW4iLCJnaXZlbl9uYW1lIjoiQWRtaW4iLCJmYW1pbHlfbmFtZSI6IklrdXJlIiwiZW1haWwiOiJhZG1pbmlrdXJlQGlrdXJlLmluIn0.FZB7euRo9sDcVQ5o4ZyePFN9z2-MZeNDmTeAFwrtl60",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        deliveryStatus: "Order Placed",
        salesOrderReferenceId: newSOCHW._id,
        facilityCode: newSOCHW.facilityCode,
        products: JSON.stringify([
          {
            productId: newSOCHW.products[0].productId,
            batch: newSOCHW.products[0].batch,
            GST: newSOCHW.products[0].GST,
            IGST: newSOCHW.products[0].IGST,
            CGST: newSOCHW.products[0].CGST,
            SGST: newSOCHW.products[0].SGST,
            totalQuantity: newSOCHW.products[0].totalQuantity,
            ratePerUnit: Number(newSOCHW.products[0].ratePerUnit),
            discount: newSOCHW.products[0].discount,
            totalPriceValue: newSOCHW.products[0].totalPriceValue,
            inventoryId: newSOCHW.products[0].inventoryId,
          },
        ]),
        totalAmount: newSOCHW.totalAmount,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateSalesOrders(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully updated SalesOrder details",
        data: expect.objectContaining({
          salesOrder: expect.any(Object),
        }),
      })
    );
  });

  test("POST /update sales order api FM updated order packed)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiRkFDSUxJVFlfTUFOQUdFUiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJPcmdhbml6YXRpb24iOnsib3JnYW5pemF0aW9uUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJSZXBvcnQiOnsicmVwb3J0TWFuYWdlbWVudCI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJDTVMiOnsiY21zUHJvcGVydGllcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJPcmdhbml6YXRpb25BZG1pbiI6eyJvcmdhbml6YXRpb25BZG1pblByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmRMaW1pdCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImhlYWx0aENhcmREZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIkRvY3RvciI6eyJkb2N0b3JTZXJ2aWNlcyI6WyJSZWFkIiwiVXBkYXRlIl0sImRvY3RvclByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiT25ib2FyZGluZyI6eyJmYWNpbGl0eU1hbmFnZXJPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJjaHdPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX0sIlByb2plY3QiOnsicHJvamVjdERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiQ29uc2VudCI6eyJjb25zZW50RGF0YSI6WyJSZWFkIiwiRGVsZXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIkRlbGV0ZSJdfSwiRmFjaWxpdHlNYW5hZ2VyIjp7ImZhY2lsaXR5TWFuYWdlclByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiQ0hXTWFuYWdlbWVudCI6eyJjaHdQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXSwiY2h3QXR0ZW5kZW5jZSI6WyJSZWFkIl19LCJDb25zdWx0YXRpb24iOnsiY29uc3VsdGF0aW9uRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5T25ib2FyZGluZyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIiwic2lkIjoiMzIzZmQ0MWYtY2Q2ZC00OWYzLThiNGYtNGU2MDczMGQ2NWM0IiwiZW1haWxfdmVyaWZpZWQiOnRydWUsIm5hbWUiOiJBZG1pbiBJa3VyZSIsInByZWZlcnJlZF91c2VybmFtZSI6ImFkbWluaWt1cmVAaWt1cmUuaW4iLCJnaXZlbl9uYW1lIjoiQWRtaW4iLCJmYW1pbHlfbmFtZSI6IklrdXJlIiwiZW1haWwiOiJhZG1pbmlrdXJlQGlrdXJlLmluIn0.FZB7euRo9sDcVQ5o4ZyePFN9z2-MZeNDmTeAFwrtl60",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        deliveryStatus: "Order Packed",
        salesOrderReferenceId: newSOCHW._id,
        facilityCode: newSOCHW.facilityCode,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateSalesOrders(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully updated SalesOrder details",
        data: expect.objectContaining({
          salesOrder: expect.any(Object),
        }),
      })
    );
  });

  test("POST /update sales order api CHW updated order received)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        deliveryStatus: "Order Delivered",
        salesOrderReferenceId: newSOCHW._id,
        facilityCode: newSOCHW.facilityCode,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await updateSalesOrders(mockRequest, mockResponse);
    newCHWInventoryLists =
      mockResponse.json.mock.calls[0][0].data.chwInventoriesList;
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Successfully updated SalesOrder details",
        data: expect.objectContaining({
          salesOrder: expect.any(Object),
        }),
      })
    );
  });
});

describe("Sales Order Get All Order API", () => {
  test("GET /get/all get all Sales Order api when order does not exist with the given filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        paymentStatus: 0,
        type: "CHW",
        orderId: newsalesOrderId,
        chwId: "CHW45678",
        startDate: "2023-05-15",
        endDate: "2023-06-15",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no Sales Order",
    });
  });

  test("GET /get/all get all Sales Order api with incorrect paymentStatus filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        paymentStatus: 8,
        type: "CHW",
        orderId: newsalesOrderId,
        chwId: "CHW45678",
        startDate: "2023-05-15",
        endDate: "2023-06-15",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Incorrect paymentStatus",
    });
  });

  test("GET /get/all get all Sales Order api with incorrect deliveryStatus filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 8,
        paymentStatus: 0,
        type: "CHW",
        orderId: newsalesOrderId,
        chwId: "CHW45678",
        startDate: "2023-05-15",
        endDate: "2023-06-15",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Incorrect deliveryStatus",
    });
  });

  test("GET /get/all get all Sales Order api when Start date is a future date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");
    const futureDate = dayjs()
      .tz("Asia/Kolkata")
      .add(2, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        orderId: newSOCHW.orderId,
        chwId: newSOCHW.chwId,
        startDate: futureDate,
        endDate: currentDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Start date cannot be a future date",
    });
  });

  test("GET /get/all get all Sales Order api when end date is a past date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");
    const futureDate = dayjs()
      .tz("Asia/Kolkata")
      .add(2, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        orderId: newSOCHW.orderId,
        chwId: newSOCHW.chwId,
        startDate: currentDate,
        endDate: previousDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "End date cannot be a date before start date",
    });
  });

  test("GET /get/all get all Sales Order api when end date is a future date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");
    const futureDate = dayjs()
      .tz("Asia/Kolkata")
      .add(2, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        orderId: newSOCHW.orderId,
        chwId: newSOCHW.chwId,
        startDate: currentDate,
        endDate: futureDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "End date cannot be a future date",
    });
  });

  test("GET /get/all get all Sales Order api when start date is missing)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");
    const futureDate = dayjs()
      .tz("Asia/Kolkata")
      .add(2, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        orderId: newSOCHW.orderId,
        chwId: newSOCHW.chwId,
        endDate: currentDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Start date is missing",
    });
  });

  test("GET /get/all get all Sales Order api with correct filters and no end date only start date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        orderId: newSOCHW.orderId,
        chwId: newSOCHW.chwId,
        startDate: previousDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sale Order list",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all Sales Order api with correct filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        customerType: 1,
        chwId: "CHW78945",
        // startDate: '2023-05-15',
        // endDate: '2023-06-15'
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sale Order list",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all Sales Order api with correct filters payment status as Pending)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        paymentStatus: 0,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sale Order list",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all Sales Order api with correct filters payment status as Partially Paid)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        paymentStatus: 1,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no Sales Order",
    });
  });

  test("GET /get/all get all Sales Order api with correct filters payment status as Paid)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        paymentStatus: 2,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no Sales Order",
    });
  });

  test("GET /get/all get all Sales Order api with correct filters payment status as Not Applicable)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        paymentStatus: 3,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sale Order list",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all Sales Order api with correct filters delivery status as Order Initiated)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sale Order list",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all Sales Order api with correct filters delivery status as Order Placed)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 1,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no Sales Order",
    });
  });

  test("GET /get/all get all Sales Order api with correct filters delivery status as Order Packed)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 2,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no Sales Order",
    });
  });

  test("GET /get/all get all Sales Order api with correct filters delivery status as Order Shipped)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 3,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no Sales Order",
    });
  });

  test("GET /get/all get all Sales Order api with correct filters delivery status as Order Delivered)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 4,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sale Order list",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all Sales Order api with correct filters delivery status as Order Cancelled)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 5,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no Sales Order",
    });
  });

  test("GET /get/all get all Sales Order api with correct filters customer CHW)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        customerType: 1,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sale Order list",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all Sales Order api with correct filters customer Patient)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        customerType: 0,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrder(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sale Order list",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });
});

describe("Sales Order Get order by ID API", () => {
  test("GET /get/id Api when missing orderId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getSalesOrderById(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Missing Order ID",
    });
  });

  test("GET /get/id when Sales Order does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        orderId: newsalesOrderId,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getSalesOrderById(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Sales Order does not exist",
    });
  });

  test("GET /get/id With correct orderId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        orderId: newSOCHW.orderId,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getSalesOrderById(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sales Order details",
        data: expect.objectContaining({
          order: expect.any(Object),
        }),
      })
    );
  });
});

describe("Sales Order Get All Order WEB API", () => {
  test("GET /get/all get all Sales Order api when order does not exist with the given filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        paymentStatus: 0,
        type: "CHW",
        orderId: newsalesOrderId,
        chwId: "CHW45678",
        startDate: "2023-05-15",
        endDate: "2023-06-15",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no Sales Order",
    });
  });

  test("GET /get/all get all Sales Order api with incorrect paymentStatus filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        paymentStatus: 8,
        type: "CHW",
        orderId: newsalesOrderId,
        chwId: "CHW45678",
        startDate: "2023-05-15",
        endDate: "2023-06-15",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Incorrect paymentStatus",
    });
  });

  test("GET /get/all get all Sales Order api with incorrect deliveryStatus filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 8,
        paymentStatus: 0,
        type: "CHW",
        orderId: newsalesOrderId,
        chwId: "CHW45678",
        startDate: "2023-05-15",
        endDate: "2023-06-15",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Incorrect deliveryStatus",
    });
  });

  test("GET /get/all get all Sales Order api when Start date is a future date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");
    const futureDate = dayjs()
      .tz("Asia/Kolkata")
      .add(2, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        orderId: newSOCHW.orderId,
        chwId: newSOCHW.chwId,
        startDate: futureDate,
        endDate: currentDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Start date cannot be a future date",
    });
  });

  test("GET /get/all get all Sales Order api when end date is a past date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");
    const futureDate = dayjs()
      .tz("Asia/Kolkata")
      .add(2, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        orderId: newSOCHW.orderId,
        chwId: newSOCHW.chwId,
        startDate: currentDate,
        endDate: previousDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "End date cannot be a date before start date",
    });
  });

  test("GET /get/all get all Sales Order api when end date is a future date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");
    const futureDate = dayjs()
      .tz("Asia/Kolkata")
      .add(2, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        orderId: newSOCHW.orderId,
        chwId: newSOCHW.chwId,
        startDate: currentDate,
        endDate: futureDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "End date cannot be a future date",
    });
  });

  test("GET /get/all get all Sales Order api when start date is missing)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");
    const futureDate = dayjs()
      .tz("Asia/Kolkata")
      .add(2, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        orderId: newSOCHW.orderId,
        chwId: newSOCHW.chwId,
        endDate: currentDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Start date is missing",
    });
  });

  test("GET /get/all get all Sales Order api with correct filters and no end date only start date)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        orderId: newSOCHW.orderId,
        chwId: newSOCHW.chwId,
        startDate: previousDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sale Order list",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all Sales Order api with correct filters)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        orderId: newSOCHW.orderId,
        chwId: newSOCHW.chwId,
        startDate: previousDate,
        endDate: currentDate,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sale Order list",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all Sales Order api with correct filters payment status as Pending)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        paymentStatus: 0,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sale Order list",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all Sales Order api with correct filters payment status as Partially Paid)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        paymentStatus: 1,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no Sales Order",
    });
  });

  test("GET /get/all get all Sales Order api with correct filters payment status as Paid)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        paymentStatus: 2,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no Sales Order",
    });
  });

  test("GET /get/all get all Sales Order api with correct filters payment status as Not Applicable)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
        paymentStatus: 3,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sale Order list",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all Sales Order api with correct filters delivery status as Order Initiated)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 0,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sale Order list",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all Sales Order api with correct filters delivery status as Order Placed)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 1,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no Sales Order",
    });
  });

  test("GET /get/all get all Sales Order api with correct filters delivery status as Order Packed)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 2,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no Sales Order",
    });
  });

  test("GET /get/all get all Sales Order api with correct filters delivery status as Order Shipped)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 3,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no Sales Order",
    });
  });

  test("GET /get/all get all Sales Order api with correct filters delivery status as Order Delivered)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 4,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sale Order list",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all Sales Order api with correct filters delivery status as Order Cancelled)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        deliveryStatus: 5,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "There is no Sales Order",
    });
  });

  test("GET /get/all get all Sales Order api with correct filters customer CHW)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        customerType: 1,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sale Order list",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });

  test("GET /get/all get all Sales Order api with correct filters customer Patient)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }
    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const currentDate = dayjs().tz("Asia/Kolkata").format("YYYY-MM-DD");
    const previousDate = dayjs()
      .tz("Asia/Kolkata")
      .subtract(1, "day")
      .format("YYYY-MM-DD");

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        facilityCode: "DCKABL000",
        customerType: 0,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getAllSalesOrderWeb(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sale Order list",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });
});

describe("Sales Order Get order by ID WEB API", () => {
  test("GET /get/id Api when missing orderId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getSalesOrderByIdWeb(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Missing Order ID",
    });
  });

  test("GET /get/id when Sales Order does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        orderId: "S0710",
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getSalesOrderByIdWeb(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Sales Order does not exist",
    });
  });

  test("GET /get/id With correct orderId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {
        orderId: newSOCHW.orderId,
      },
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await getSalesOrderByIdWeb(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sales Order details",
        data: expect.objectContaining({
          order: expect.any(Array),
        }),
      })
    );
  });
});

describe("Search Sales Order by readable ID", () => {
  describe("User validations", () => {
    test("User with Role Doctor", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiRE9DVE9SIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.VwWXRoT8k2yT3BgIIfRhYQ9_n2LjSeFcjCwYxtxLEHg",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await searchSOByReadableId(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role CHW", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiQ0hXIl19LCJGYWNpbGl0eSI6eyJmYWNpbGl0eUNvZCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fQ.DVCD-O46oFlJRTlFzKTYpjjyXHmR9eq6r5yROh05ugw",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await searchSOByReadableId(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });

    test("User with Role Patient", async () => {
      interface CustomFile extends File {
        buffer: Buffer;
        fieldname: string;
        originalname: string;
        encoding: string;
        mimetype: string;
        size: number;
        destination: string;
        filename: string;
        path: string;
        stream: any;
      }
      interface CustomRequest extends Request {
        cache: any;
        credentials: any;
        destination: any;
        integrity: any;
        keepalive: any;
        mode: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        signal: any;
        clone: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        json: any;
        text: any;
        file: CustomFile;
        headers: {
          authorization: string;
        };
        // Add other missing properties here
      }

      interface CustomResponse extends Response {
        headers: any;
        ok: any;
        redirected: any;
        statusText: any;
        url: any;
        clone: any;
        body: any;
        bodyUsed: any;
        arrayBuffer: any;
        blob: any;
        formData: any;
        text: any;
        status: any;
        type: any;
        json: any;
      }

      const mockRequest: CustomRequest = {
        headers: {
          authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJodHRwczovL2F1dGgud2hpbXNsaXZlLmNvbS9hdXRoL3JlYWxtcy9pa3VyZSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXBwaGYiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUEFUSUVOVCJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlDb2QiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJmYWNpbGl0eUNod0Fzc2lnbiI6WyJSZWFkIiwiVXBkYXRlIl0sImZhY2lsaXR5UHJvZmlsZSI6WyJSZWFkLFVwZGF0ZSJdfX0.pa81liYkIf6iJEpQBj8XyophoRrFYaYV3xNQwjIbpRc",
        },
      } as CustomRequest;
      const mockResponse: CustomResponse = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        // Add other missing properties here
      } as CustomResponse;

      await searchSOByReadableId(mockRequest, mockResponse);
      expect(mockResponse.status).toHaveBeenCalledWith(403);
      expect(mockResponse.json).toHaveBeenCalledWith({
        status: false,
        message: "User does not have permission",
      });
    });
  });

  test("GET /get/id Api when missing required fields)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiRkFDSUxJVFlfTUFOQUdFUiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJPcmdhbml6YXRpb24iOnsib3JnYW5pemF0aW9uUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJSZXBvcnQiOnsicmVwb3J0TWFuYWdlbWVudCI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJDTVMiOnsiY21zUHJvcGVydGllcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJPcmdhbml6YXRpb25BZG1pbiI6eyJvcmdhbml6YXRpb25BZG1pblByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmRMaW1pdCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImhlYWx0aENhcmREZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIkRvY3RvciI6eyJkb2N0b3JTZXJ2aWNlcyI6WyJSZWFkIiwiVXBkYXRlIl0sImRvY3RvclByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiT25ib2FyZGluZyI6eyJmYWNpbGl0eU1hbmFnZXJPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJjaHdPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX0sIlByb2plY3QiOnsicHJvamVjdERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiQ29uc2VudCI6eyJjb25zZW50RGF0YSI6WyJSZWFkIiwiRGVsZXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIkRlbGV0ZSJdfSwiRmFjaWxpdHlNYW5hZ2VyIjp7ImZhY2lsaXR5TWFuYWdlclByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiQ0hXTWFuYWdlbWVudCI6eyJjaHdQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXSwiY2h3QXR0ZW5kZW5jZSI6WyJSZWFkIl19LCJDb25zdWx0YXRpb24iOnsiY29uc3VsdGF0aW9uRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5T25ib2FyZGluZyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIiwic2lkIjoiMzIzZmQ0MWYtY2Q2ZC00OWYzLThiNGYtNGU2MDczMGQ2NWM0IiwiZW1haWxfdmVyaWZpZWQiOnRydWUsIm5hbWUiOiJBZG1pbiBJa3VyZSIsInByZWZlcnJlZF91c2VybmFtZSI6ImFkbWluaWt1cmVAaWt1cmUuaW4iLCJnaXZlbl9uYW1lIjoiQWRtaW4iLCJmYW1pbHlfbmFtZSI6IklrdXJlIiwiZW1haWwiOiJhZG1pbmlrdXJlQGlrdXJlLmluIn0.FZB7euRo9sDcVQ5o4ZyePFN9z2-MZeNDmTeAFwrtl60",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {},
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await searchSOByReadableId(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing"),
      })
    );
  });

  test("GET /get/id when Sales Order does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiRkFDSUxJVFlfTUFOQUdFUiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJPcmdhbml6YXRpb24iOnsib3JnYW5pemF0aW9uUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJSZXBvcnQiOnsicmVwb3J0TWFuYWdlbWVudCI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJDTVMiOnsiY21zUHJvcGVydGllcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJPcmdhbml6YXRpb25BZG1pbiI6eyJvcmdhbml6YXRpb25BZG1pblByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmRMaW1pdCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImhlYWx0aENhcmREZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIkRvY3RvciI6eyJkb2N0b3JTZXJ2aWNlcyI6WyJSZWFkIiwiVXBkYXRlIl0sImRvY3RvclByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiT25ib2FyZGluZyI6eyJmYWNpbGl0eU1hbmFnZXJPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJjaHdPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX0sIlByb2plY3QiOnsicHJvamVjdERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiQ29uc2VudCI6eyJjb25zZW50RGF0YSI6WyJSZWFkIiwiRGVsZXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIkRlbGV0ZSJdfSwiRmFjaWxpdHlNYW5hZ2VyIjp7ImZhY2lsaXR5TWFuYWdlclByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiQ0hXTWFuYWdlbWVudCI6eyJjaHdQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXSwiY2h3QXR0ZW5kZW5jZSI6WyJSZWFkIl19LCJDb25zdWx0YXRpb24iOnsiY29uc3VsdGF0aW9uRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5T25ib2FyZGluZyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIiwic2lkIjoiMzIzZmQ0MWYtY2Q2ZC00OWYzLThiNGYtNGU2MDczMGQ2NWM0IiwiZW1haWxfdmVyaWZpZWQiOnRydWUsIm5hbWUiOiJBZG1pbiBJa3VyZSIsInByZWZlcnJlZF91c2VybmFtZSI6ImFkbWluaWt1cmVAaWt1cmUuaW4iLCJnaXZlbl9uYW1lIjoiQWRtaW4iLCJmYW1pbHlfbmFtZSI6IklrdXJlIiwiZW1haWwiOiJhZG1pbmlrdXJlQGlrdXJlLmluIn0.FZB7euRo9sDcVQ5o4ZyePFN9z2-MZeNDmTeAFwrtl60",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        orderId: "S00454",
        facilityCode: newSOCHW.facilityCode,
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await searchSOByReadableId(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith({
      status: false,
      message: "Sales order does not exist",
    });
  });

  test("GET /get/id With correct orderId)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      query: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiRkFDSUxJVFlfTUFOQUdFUiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IkZvY3VzZWRHcm91cCI6eyJmb2N1c2VkR3JvdXBEYXRhIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXSwiZm9jdXNlZEdyb3VwTGlzdCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRGb2N1c2VkR3JvdXAiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdfSwiRm9ybXMiOnsiZm9ybURldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiVGFzayI6eyJ0YXNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJPcmdhbml6YXRpb24iOnsib3JnYW5pemF0aW9uUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJSZXBvcnQiOnsicmVwb3J0TWFuYWdlbWVudCI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJDTVMiOnsiY21zUHJvcGVydGllcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJPcmdhbml6YXRpb25BZG1pbiI6eyJvcmdhbml6YXRpb25BZG1pblByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiUGF0aWVudCI6eyJwcmVzY3JpcHRpb24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJwYXRpZW50U2VydmljZXMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdLCJwYXRpZW50UHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJIZWFsdGhDYXJkIjp7ImhlYWx0aENhcmRMaW1pdCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImhlYWx0aENhcmREZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIkRvY3RvciI6eyJkb2N0b3JTZXJ2aWNlcyI6WyJSZWFkIiwiVXBkYXRlIl0sImRvY3RvclByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiT25ib2FyZGluZyI6eyJmYWNpbGl0eU1hbmFnZXJPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJjaHdPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJwYXRpZW50T25ib2FyZGluZyI6WyJDcmVhdGUiXSwiZG9jdG9yT25ib2FyZGluZyI6WyJDcmVhdGUiXX0sIlByb2plY3QiOnsicHJvamVjdERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiQ29uc2VudCI6eyJjb25zZW50RGF0YSI6WyJSZWFkIiwiRGVsZXRlIl19LCJGZWVkYmFjayI6eyJmZWVkYmFja0RldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIkRlbGV0ZSJdfSwiRmFjaWxpdHlNYW5hZ2VyIjp7ImZhY2lsaXR5TWFuYWdlclByb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdfSwiQ0hXTWFuYWdlbWVudCI6eyJjaHdQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXSwiY2h3QXR0ZW5kZW5jZSI6WyJSZWFkIl19LCJDb25zdWx0YXRpb24iOnsiY29uc3VsdGF0aW9uRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJWaXRhbHMiOnsidml0YWxzQ29sbGVjdGlvbiI6WyJDcmVhdGUiLCJSZWFkIl0sInZpdGFsc0xpc3QiOlsiUmVhZCJdLCJ2aXRhbFJhbmdlIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIkZhY2lsaXR5Ijp7ImZhY2lsaXR5T25ib2FyZGluZyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sImZhY2lsaXR5Q2h3QXNzaWduIjpbIlJlYWQiLCJVcGRhdGUiXSwiZmFjaWxpdHlQcm9maWxlIjpbIlJlYWQsVXBkYXRlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIiwic2lkIjoiMzIzZmQ0MWYtY2Q2ZC00OWYzLThiNGYtNGU2MDczMGQ2NWM0IiwiZW1haWxfdmVyaWZpZWQiOnRydWUsIm5hbWUiOiJBZG1pbiBJa3VyZSIsInByZWZlcnJlZF91c2VybmFtZSI6ImFkbWluaWt1cmVAaWt1cmUuaW4iLCJnaXZlbl9uYW1lIjoiQWRtaW4iLCJmYW1pbHlfbmFtZSI6IklrdXJlIiwiZW1haWwiOiJhZG1pbmlrdXJlQGlrdXJlLmluIn0.FZB7euRo9sDcVQ5o4ZyePFN9z2-MZeNDmTeAFwrtl60",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        orderId: newSOCHW.orderId,
        facilityCode: newSOCHW.facilityCode,
      },
      query: {},
    } as CustomRequest;

    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await searchSOByReadableId(mockRequest, mockResponse);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sales order",
        data: expect.objectContaining({
          salesOrder: expect.any(Array),
        }),
      })
    );
  });
});

describe("SalesOrder create API for Patient Sales", () => {
  /* Sales order for Patient */
  test("POST /Create Sales Order missing order type)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 2,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing order type"),
      })
    );
  });

  test("POST /Create Sales Order incorrect order type)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 2,
        type: 5,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Incorrect order type"),
      })
    );
  });

  test("POST /Create Sales Order with correct order type but missing user details in the token)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwiZ2l2ZW5fbmFtZSI6IkFkbWluIiwiZmFtaWx5X25hbWUiOiJJa3VyZSIsImVtYWlsIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiJ9.idzkOko9wyMLQvYrDCC8Ch1V1wXuqdXQ32Cw6kGjoII",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 2,
        type: 1,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Failed to get the user"),
      })
    );
  });

  test("POST /Create Sales Order missing products)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realm: "",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 2,
        type: 1,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Missing products"),
      })
    );
  });

  test("POST /Create Sales Order advanceReceived is more than total order amount)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realmName: "ikure",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 2,
        type: 1,
        products: JSON.stringify([
          {
            productId: "647f4063470115f79424148e",
            batch: "45u",
            GST: 5,
            IGST: 0,
            CGST: 2.5,
            SGST: 2.5,
            totalQuantity: 1,
            ratePerUnit: 4,
            discount: 0,
            totalPriceValue: 4,
            inventoryId: "64b6802a811eaa3356e883a2",
          },
        ]),
        chwId: "CHW45124",
        facilityCode: "DCKABL000",
        totalAmount: 4,
        paymentStatus: "Paid",
        advanceReceived: 5,
        uhid: 36644353589322,
        totalGST: 0.2,
        totalDiscount: 0,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining(
          "Advance received in greater that total sales order amount"
        ),
      })
    );
  });

  test("POST /Create Sales Order products does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realmName: "ikure",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 2,
        type: 1,
        products: JSON.stringify([
          {
            productId: "647f4063470115f79424148e",
            batch: "45u",
            GST: 5,
            IGST: 0,
            CGST: 2.5,
            SGST: 2.5,
            totalQuantity: 1,
            ratePerUnit: 4,
            discount: 0,
            totalPriceValue: 4,
            inventoryId: "64b6802a811eaa3356e883a2",
          },
        ]),
        chwId: "CHW45124",
        facilityCode: "DCKABL000",
        totalAmount: 4,
        paymentStatus: "Paid",
        advanceReceived: 4,
        uhid: 36644353589322,
        totalGST: 0.2,
        totalDiscount: 0,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(404);
    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Products does not exist"),
      })
    );
  });

  test("POST /Create Sales Order inventory does not exist)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realmName: "ikure",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 2,
        type: 1,
        products: JSON.stringify([
          {
            productId: productsId[0],
            batch: "45u",
            GST: 5,
            IGST: 0,
            CGST: 2.5,
            SGST: 2.5,
            totalQuantity: 1,
            ratePerUnit: 4,
            discount: 0,
            totalPriceValue: 4,
            inventoryId: "64b6802a811eaa3356e883a2",
          },
        ]),
        chwId: "CHW45124",
        facilityCode: "DCKABL000",
        totalAmount: 4,
        paymentStatus: "Paid",
        advanceReceived: 4,
        uhid: 36644353589322,
        totalGST: 0.2,
        totalDiscount: 0,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.stringContaining("Inventories does not exist"),
      })
    );
  });

  test("POST /Create Sales Order total product price is incorrect)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realmName: "ikure",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 2,
        type: 1,
        products: JSON.stringify([
          {
            productId: productsId[0],
            batch: "45u",
            GST: 5,
            IGST: 0,
            CGST: 2.5,
            SGST: 2.5,
            totalQuantity: 1,
            ratePerUnit: 10,
            discount: 0,
            totalPriceValue: 4,
            inventoryId: newCHWInventoryLists[0]._id,
          },
        ]),
        chwId: "CHW45124",
        facilityCode: "DCKABL000",
        totalAmount: 4,
        paymentStatus: "Paid",
        advanceReceived: 4,
        uhid: 36644353589322,
        totalGST: 0.2,
        totalDiscount: 0,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(400);

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: false,
        message: expect.arrayContaining([
          expect.stringMatching(/Total product price of.* is incorrect/),
          expect.stringContaining("Total sales order amount is incorrect"),
        ]),
      })
    );
  });

  test("POST /Create Sales Order correct details)", async () => {
    interface CustomRequest extends Request {
      cache: any;
      credentials: any;
      destination: any;
      integrity: any;
      keepalive: any;
      mode: any;
      redirect: any;
      referrer: any;
      referrerPolicy: any;
      signal: any;
      clone: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      json: any;
      text: any;
      headers: any;
      // Add other missing properties here
    }

    interface CustomResponse extends Response {
      headers: any;
      ok: any;
      redirected: any;
      statusText: any;
      url: any;
      clone: any;
      body: any;
      bodyUsed: any;
      arrayBuffer: any;
      blob: any;
      formData: any;
      text: any;
      status: any;
      type: any;
      json: any;
    }

    const mockRequest: CustomRequest = {
      headers: {
        authorization:
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMTMzMDYsImlhdCI6MTY2MzMxMzEyNiwianRpIjoiMjg4YmQ5YjEtZmI5Mi00ZmE2LWI3MzktOGJlNjlkMTNlZTFjIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLndoaW1zbGl2ZS5jb20vYXV0aC9yZWFsbXMvaWt1cmUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMGI5ZjU0OTMtNWYyMy00NjExLWI3MzMtMDE0OWQ2YzAxMjBmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY2h3LWZlLW1vYmlsZSIsInNlc3Npb25fc3RhdGUiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWlrdXJlIiwiQ0hXIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiRm9jdXNlZEdyb3VwIjp7ImZvY3VzZWRHcm91cERhdGEiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSJdLCJmb2N1c2VkR3JvdXBMaXN0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwicGF0aWVudEZvY3VzZWRHcm91cCI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIl19LCJGb3JtcyI6eyJmb3JtRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJUYXNrIjp7InRhc2tEZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbiI6eyJvcmdhbml6YXRpb25Qcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIlJlcG9ydCI6eyJyZXBvcnRNYW5hZ2VtZW50IjpbIkNyZWF0ZSIsIlJlYWQiLCJEZWxldGUiXX0sIkNNUyI6eyJjbXNQcm9wZXJ0aWVzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXX0sIk9yZ2FuaXphdGlvbkFkbWluIjp7Im9yZ2FuaXphdGlvbkFkbWluUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJQYXRpZW50Ijp7InByZXNjcmlwdGlvbiI6WyJSZWFkIiwiVXBkYXRlIl0sInBhdGllbnRTZXJ2aWNlcyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl0sInBhdGllbnRQcm9maWxlIjpbIlJlYWQiLCJVcGRhdGUiXX0sIkhlYWx0aENhcmQiOnsiaGVhbHRoQ2FyZExpbWl0IjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiaGVhbHRoQ2FyZERldGFpbHMiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRG9jdG9yIjp7ImRvY3RvclNlcnZpY2VzIjpbIlJlYWQiLCJVcGRhdGUiXSwiZG9jdG9yUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJPbmJvYXJkaW5nIjp7ImZhY2lsaXR5TWFuYWdlck9uYm9hcmRpbmciOlsiQ3JlYXRlIl0sImNod09uYm9hcmRpbmciOlsiQ3JlYXRlIl0sInBhdGllbnRPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdLCJkb2N0b3JPbmJvYXJkaW5nIjpbIkNyZWF0ZSJdfSwiUHJvamVjdCI6eyJwcm9qZWN0RGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiVXBkYXRlIiwiRGVsZXRlIl19LCJDb25zZW50Ijp7ImNvbnNlbnREYXRhIjpbIlJlYWQiLCJEZWxldGUiXX0sIkZlZWRiYWNrIjp7ImZlZWRiYWNrRGV0YWlscyI6WyJDcmVhdGUiLCJSZWFkIiwiRGVsZXRlIl19LCJGYWNpbGl0eU1hbmFnZXIiOnsiZmFjaWxpdHlNYW5hZ2VyUHJvZmlsZSI6WyJSZWFkIiwiVXBkYXRlIl19LCJDSFdNYW5hZ2VtZW50Ijp7ImNod1Byb2ZpbGUiOlsiUmVhZCIsIlVwZGF0ZSJdLCJjaHdBdHRlbmRlbmNlIjpbIlJlYWQiXX0sIkNvbnN1bHRhdGlvbiI6eyJjb25zdWx0YXRpb25EZXRhaWxzIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiXX0sIlZpdGFscyI6eyJ2aXRhbHNDb2xsZWN0aW9uIjpbIkNyZWF0ZSIsIlJlYWQiXSwidml0YWxzTGlzdCI6WyJSZWFkIl0sInZpdGFsUmFuZ2UiOlsiQ3JlYXRlIiwiUmVhZCIsIlVwZGF0ZSIsIkRlbGV0ZSJdfSwiRmFjaWxpdHkiOnsiZmFjaWxpdHlPbmJvYXJkaW5nIjpbIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJEZWxldGUiXSwiZmFjaWxpdHlDaHdBc3NpZ24iOlsiUmVhZCIsIlVwZGF0ZSJdLCJmYWNpbGl0eVByb2ZpbGUiOlsiUmVhZCxVcGRhdGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiIzMjNmZDQxZi1jZDZkLTQ5ZjMtOGI0Zi00ZTYwNzMwZDY1YzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkFkbWluIElrdXJlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW5pa3VyZUBpa3VyZS5pbiIsImdpdmVuX25hbWUiOiJBZG1pbiIsImZhbWlseV9uYW1lIjoiSWt1cmUiLCJlbWFpbCI6ImFkbWluaWt1cmVAaWt1cmUuaW4ifQ.IfKFRKXYtno7nmgnUBwOBG0roJN7T8-zmAKxonb4lFg",
        realmName: "ikure",
        dynamicdb: modelConnectionsToHeader,
      },
      body: {
        customerType: 2,
        type: 1,
        products: JSON.stringify([
          {
            productId: productsId[0],
            batch: "45u",
            GST: 5,
            IGST: 0,
            CGST: 2.5,
            SGST: 2.5,
            totalQuantity: 1,
            ratePerUnit: 10,
            discount: 0,
            totalPriceValue: 10,
            inventoryId: newCHWInventoryLists[0]._id,
          },
        ]),
        chwId: "CHW45124",
        facilityCode: "DCKABL000",
        totalAmount: 10,
        paymentStatus: "Paid",
        advanceReceived: 4,
        uhid: 36644353589322,
        totalGST: 0.2,
        totalDiscount: 0,
      },
    } as CustomRequest;
    const mockResponse: CustomResponse = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
      // Add other missing properties here
    } as CustomResponse;

    await createSalesOrders(mockRequest, mockResponse);
    expect(mockResponse.status).toHaveBeenCalledWith(201);

    expect(mockResponse.json).toHaveBeenCalledWith(
      expect.objectContaining({
        status: true,
        message: "Sales Order created Successfully.",
        data: expect.any(Object),
      })
    );
  });
});
