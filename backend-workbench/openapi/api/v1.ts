/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/crm/companies": {
    /**
     * List companies
     * @description List companies
     */
    get: operations["companiesAll"];
    /**
     * Create company
     * @description Create company
     */
    post: operations["companiesAdd"];
  };
  "/crm/companies/{id}": {
    /**
     * Get company
     * @description Get company
     */
    get: operations["companiesOne"];
    /**
     * Delete company
     * @description Delete company
     */
    delete: operations["companiesDelete"];
    /**
     * Update company
     * @description Update company
     */
    patch: operations["companiesUpdate"];
  };
  "/crm/contacts": {
    /**
     * List contacts
     * @description List contacts
     */
    get: operations["contactsAll"];
    /**
     * Create contact
     * @description Create contact
     */
    post: operations["contactsAdd"];
  };
  "/crm/contacts/{id}": {
    /**
     * Get contact
     * @description Get contact
     */
    get: operations["contactsOne"];
    /**
     * Delete contact
     * @description Delete contact
     */
    delete: operations["contactsDelete"];
    /**
     * Update contact
     * @description Update contact
     */
    patch: operations["contactsUpdate"];
  };
  "/crm/opportunities": {
    /**
     * List opportunities
     * @description List opportunities
     */
    get: operations["opportunitiesAll"];
    /**
     * Create opportunity
     * @description Create opportunity
     */
    post: operations["opportunitiesAdd"];
  };
  "/crm/opportunities/{id}": {
    /**
     * Get opportunity
     * @description Get opportunity
     */
    get: operations["opportunitiesOne"];
    /**
     * Delete opportunity
     * @description Delete opportunity
     */
    delete: operations["opportunitiesDelete"];
    /**
     * Update opportunity
     * @description Update opportunity
     */
    patch: operations["opportunitiesUpdate"];
  };
  "/crm/leads": {
    /**
     * List leads
     * @description List leads
     */
    get: operations["leadsAll"];
    /**
     * Create lead
     * @description Create lead
     */
    post: operations["leadsAdd"];
  };
  "/crm/leads/{id}": {
    /**
     * Get lead
     * @description Get lead
     */
    get: operations["leadsOne"];
    /**
     * Delete lead
     * @description Delete lead
     */
    delete: operations["leadsDelete"];
    /**
     * Update lead
     * @description Update lead
     */
    patch: operations["leadsUpdate"];
  };
  "/crm/pipelines": {
    /**
     * List pipelines
     * @description List pipelines
     */
    get: operations["pipelinesAll"];
    /**
     * Create pipeline
     * @description Create pipeline
     */
    post: operations["pipelinesAdd"];
  };
  "/crm/pipelines/{id}": {
    /**
     * Get pipeline
     * @description Get pipeline
     */
    get: operations["pipelinesOne"];
    /**
     * Delete pipeline
     * @description Delete pipeline
     */
    delete: operations["pipelinesDelete"];
    /**
     * Update pipeline
     * @description Update pipeline
     */
    patch: operations["pipelinesUpdate"];
  };
  "/crm/notes": {
    /**
     * List notes
     * @description List notes
     */
    get: operations["notesAll"];
    /**
     * Create note
     * @description Create note
     */
    post: operations["notesAdd"];
  };
  "/crm/notes/{id}": {
    /**
     * Get note
     * @description Get note
     */
    get: operations["notesOne"];
    /**
     * Delete note
     * @description Delete note
     */
    delete: operations["notesDelete"];
    /**
     * Update note
     * @description Update note
     */
    patch: operations["notesUpdate"];
  };
  "/crm/users": {
    /**
     * List users
     * @description List users
     */
    get: operations["usersAll"];
    /**
     * Create user
     * @description Create user
     */
    post: operations["usersAdd"];
  };
  "/crm/users/{id}": {
    /**
     * Get user
     * @description Get user
     */
    get: operations["usersOne"];
    /**
     * Delete user
     * @description Delete user
     */
    delete: operations["usersDelete"];
    /**
     * Update user
     * @description Update user
     */
    patch: operations["usersUpdate"];
  };
  "/crm/activities": {
    /**
     * List activities
     * @description List activities
     */
    get: operations["activitiesAll"];
    /**
     * Create activity
     * @description Create activity
     */
    post: operations["activitiesAdd"];
  };
  "/crm/activities/{id}": {
    /**
     * Get activity
     * @description Get activity
     */
    get: operations["activitiesOne"];
    /**
     * Delete activity
     * @description Delete activity
     */
    delete: operations["activitiesDelete"];
    /**
     * Update activity
     * @description Update activity
     */
    patch: operations["activitiesUpdate"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @example {
     *   "updated_since": "2020-09-30T07:43:32.000Z"
     * }
     */
    ActivitiesFilter: {
      /**
       * @description Company ID to filter on
       * @example 1234
       */
      company_id?: string;
      /**
       * @description Owner ID to filter on
       * @example 1234
       */
      owner_id?: string;
      /**
       * @description Primary contact ID to filter on
       * @example 1234
       */
      contact_id?: string;
      /**
       * Updated since (timestamp)
       * Format: date-time
       * @example 2020-09-30T07:43:32.000Z
       */
      updated_since?: string;
    };
    /**
     * @example {
     *   "by": "created_at",
     *   "direction": "desc"
     * }
     */
    ActivitiesSort: {
      /**
       * @description The field on which to sort the Activities
       * @example created_at
       * @enum {string}
       */
      by?: "created_at" | "updated_at";
      direction?: components["schemas"]["SortDirection"];
    };
    Activity: {
      /**
       * @description The unique identifier of the activity
       * @example 12345
       */
      id?: string;
      /**
       * @description The third-party API ID of original entity
       * @example 12345
       */
      downstream_id?: string | null;
      /**
       * @description The date and time of the activity
       * @example 2021-05-01T12:00:00.000Z
       */
      activity_datetime?: string | null;
      /**
       * @description The duration of the activity in seconds
       * @example 1800
       */
      duration_seconds?: number | null;
      /**
       * @description The user related to the activity
       * @example 12345
       */
      user_id?: string | null;
      /**
       * @description The account related to the activity
       * @example 12345
       */
      account_id?: string | null;
      /**
       * @description The contact related to the activity
       * @example 12345
       */
      contact_id?: string | null;
      /**
       * @description The company related to the activity
       * @example 12345
       */
      company_id?: string | null;
      /**
       * @description The opportunity related to the activity
       * @example 12345
       */
      opportunity_id?: string | null;
      /**
       * @description The lead related to the activity
       * @example 12345
       */
      lead_id?: string | null;
      /**
       * @description The owner of the activity
       * @example 12345
       */
      owner_id?: string | null;
      /**
       * @description The campaign related to the activity
       * @example 12345
       */
      campaign_id?: string | null;
      /**
       * @description The case related to the activity
       * @example 12345
       */
      case_id?: string | null;
      /**
       * @description The asset related to the activity
       * @example 12345
       */
      asset_id?: string | null;
      /**
       * @description The contract related to the activity
       * @example 12345
       */
      contract_id?: string | null;
      /**
       * @description The product related to the activity
       * @example 12345
       */
      product_id?: string | null;
      /**
       * @description The solution related to the activity
       * @example 12345
       */
      solution_id?: string | null;
      /**
       * @description The custom object related to the activity
       * @example 12345
       */
      custom_object_id?: string | null;
      /**
       * @description The type of the activity
       * @example meeting
       * @enum {string|null}
       */
      type: "call" | "meeting" | "email" | "note" | "task" | "deadline" | "send-letter" | "send-quote" | "other" | null;
      /**
       * @description The title of the activity
       * @example Meeting
       */
      title?: string | null;
      /**
       * @description A description of the activity
       * @example More info about the meeting
       */
      description?: string | null;
      /**
       * Note (internal)
       * @description An internal note about the activity
       * @example An internal note about the meeting
       */
      note?: string | null;
      /**
       * @description The location of the activity
       * @example Space
       */
      location?: string | null;
      location_address?: components["schemas"]["Address"];
      /**
       * @description Whether the Activity is an all day event or not
       * @example false
       */
      all_day_event?: boolean | null;
      /**
       * @description Whether the Activity is private or not
       * @example true
       */
      private?: boolean | null;
      /**
       * @description Whether the Activity is a group event or not
       * @example true
       */
      group_event?: boolean | null;
      /**
       * @description The sub type of the group event
       * @example debrief
       */
      event_sub_type?: string | null;
      /**
       * @description The type of the group event
       * @example Proposed
       */
      group_event_type?: string | null;
      /**
       * @description Whether the activity is a child of another activity or not
       * @example false
       */
      child?: boolean | null;
      /**
       * @description Whether the activity is archived or not
       * @example false
       */
      archived?: boolean | null;
      /**
       * @description Whether the activity is deleted or not
       * @example false
       */
      deleted?: boolean | null;
      /**
       * @example busy
       * @enum {string|null}
       */
      show_as?: "free" | "busy" | null;
      /**
       * Done
       * @description Whether the Activity is done or not
       * @example false
       */
      done?: boolean | null;
      /**
       * @description The start date and time of the activity
       * @example 2021-05-01T12:00:00.000Z
       */
      start_datetime?: string | null;
      /**
       * @description The end date and time of the activity
       * @example 2021-05-01T12:30:00.000Z
       */
      end_datetime?: string | null;
      /**
       * @description The duration of the activity in minutes
       * @example 30
       */
      duration_minutes?: number | null;
      /**
       * @description The date of the activity
       * @example 2021-05-01
       */
      activity_date?: string | null;
      /**
       * @description The end date of the activity
       * @example 2021-05-01
       */
      end_date?: string | null;
      /**
       * @description Whether the activity is recurrent or not
       * @example false
       */
      recurrent?: boolean;
      /**
       * @description The date and time of the reminder
       * @example 2021-05-01T17:00:00.000Z
       */
      reminder_datetime?: string | null;
      /**
       * @description Whether the reminder is set or not
       * @example false
       */
      reminder_set?: boolean | null;
      /**
       * Meeting URL
       * @description The URL of the video conference
       * @example https://us02web.zoom.us/j/88120759396
       */
      video_conference_url?: string | null;
      /**
       * Meeting ID
       * @description The ID of the video conference
       * @example zoom:88120759396
       */
      video_conference_id?: string | null;
      /** @description Custom fields of the activity */
      custom_fields?: components["schemas"]["CustomField"][];
      attendees?: components["schemas"]["ActivityAttendee"][];
      custom_mappings?: components["schemas"]["CustomMappings"];
      /**
       * @description The user who last updated the activity
       * @example 12345
       */
      updated_by?: string | null;
      /**
       * @description The user who created the activity
       * @example 12345
       */
      created_by?: string | null;
      /**
       * @description The date and time when the activity was last updated
       * @example 2020-09-30T07:43:32.000Z
       */
      updated_at?: string | null;
      /**
       * @description The date and time when the activity was created
       * @example 2020-09-30T07:43:32.000Z
       */
      created_at?: string | null;
    };
    ActivityAttendee: {
      /**
       * @description Unique identifier for the attendee
       * @example 12345
       */
      id?: string | null;
      /**
       * @description Full name of the attendee
       * @example Elon Musk
       */
      name?: string | null;
      /**
       * @description First name of the attendee
       * @example Elon
       */
      first_name?: string | null;
      /**
       * @description Middle name of the attendee
       * @example D.
       */
      middle_name?: string | null;
      /**
       * @description Last name of the attendee
       * @example Musk
       */
      last_name?: string | null;
      /**
       * @description Prefix of the attendee
       * @example Mr.
       */
      prefix?: string | null;
      /**
       * @description Suffix of the attendee
       * @example PhD
       */
      suffix?: string | null;
      /**
       * @description Email address of the attendee
       * @example elon@musk.com
       */
      email_address?: string | null;
      /**
       * @description Whether the attendee is the organizer of the activity
       * @example true
       */
      is_organizer?: boolean | null;
      /**
       * @description Status of the attendee
       * @example accepted
       * @enum {string|null}
       */
      status?: "accepted" | "tentative" | "declined" | null;
      /**
       * @description The identifier for a related user
       * @example 12345
       */
      user_id?: string | null;
      /**
       * @description The identifier for a related contact
       * @example 12345
       */
      contact_id?: string | null;
      /**
       * Format: date-time
       * @description The last time the attendee was updated (ISO 8601)
       * @example 2017-08-12T20:43:21.291Z
       */
      updated_at?: string | null;
      /**
       * Format: date-time
       * @description The time the attendee was created (ISO 8601)
       * @example 2017-08-12T20:43:21.291Z
       */
      created_at?: string | null;
    };
    Address: {
      /**
       * @description Unique identifier for the address.
       * @example 123
       */
      id?: string | null;
      /**
       * @description The type of address.
       * @example primary
       * @enum {string|null}
       */
      type?: "primary" | "secondary" | "home" | "office" | "shipping" | "billing" | "other" | null;
      /**
       * @description The address string. Some APIs don't provide structured address data.
       * @example 25 Spring Street, Blackburn, VIC 3130
       */
      string?: string | null;
      /**
       * @description The name of the address.
       * @example HQ US
       */
      name?: string | null;
      /**
       * @description Line 1 of the address e.g. number, street, suite, apt #, etc.
       * @example Main street
       */
      line1?: string | null;
      /**
       * @description Line 2 of the address
       * @example apt #
       */
      line2?: string | null;
      /**
       * @description Line 3 of the address
       * @example Suite #
       */
      line3?: string | null;
      /**
       * @description Line 4 of the address
       * @example delivery instructions
       */
      line4?: string | null;
      /**
       * @description Street number
       * @example 25
       */
      street_number?: string | null;
      /**
       * @description Name of city.
       * @example San Francisco
       */
      city?: string | null;
      /**
       * @description Name of state
       * @example CA
       */
      state?: string | null;
      /**
       * @description Zip code or equivalent.
       * @example 94104
       */
      postal_code?: string | null;
      /**
       * @description country code according to ISO 3166-1 alpha-2.
       * @example US
       */
      country?: string | null;
      /**
       * @description Latitude of the address
       * @example 40.759211
       */
      latitude?: string | null;
      /**
       * @description Longitude of the address
       * @example -73.984638
       */
      longitude?: string | null;
      /**
       * @description Address field that holds a sublocality, such as a county
       * @example Santa Clara
       */
      county?: string | null;
      /**
       * @description Name of the contact person at the address
       * @example Elon Musk
       */
      contact_name?: string | null;
      /**
       * @description Salutation of the contact person at the address
       * @example Mr
       */
      salutation?: string | null;
      /**
       * @description Phone number of the address
       * @example 111-111-1111
       */
      phone_number?: string | null;
      /**
       * @description Fax number of the address
       * @example 122-111-1111
       */
      fax?: string | null;
      /**
       * @description Email address of the address
       * @example elon@musk.com
       */
      email?: string | null;
      /**
       * @description Website of the address
       * @example https://elonmusk.com
       */
      website?: string | null;
      /**
       * Notes
       * @description Additional notes
       * @example Address notes or delivery instructions.
       */
      notes?: string | null;
      row_version?: components["schemas"]["RowVersion"];
    };
    BadRequestResponse: {
      /**
       * @description HTTP status code
       * @example 400
       */
      status_code?: number;
      /**
       * @description Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
       * @example Bad Request
       */
      error?: string;
      /**
       * @description The type of error returned
       * @example RequestValidationError
       */
      type_name?: string;
      /**
       * @description A human-readable message providing more details about the error.
       * @example Invalid Params
       */
      message?: string;
      /** @description Contains parameter or domain specific information related to the error and why it occurred. */
      detail?: string | Record<string, never>;
      /**
       * @description Link to documentation of error type
       * @example https://developers.apideck.com/errors#requestvalidationerror
       */
      ref?: string;
    };
    BankAccount: {
      /**
       * Bank Name
       * @description The name of the bank
       * @example Monzo
       */
      bank_name?: string | null;
      /**
       * Bank Account Number
       * @description A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
       * @example 123465
       */
      account_number?: string | null;
      /**
       * Bank Account Name
       * @description The name which you used in opening your bank account.
       * @example SPACEX LLC
       */
      account_name?: string | null;
      /**
       * Account Type
       * @description The type of bank account.
       * @example credit_card
       * @enum {string|null}
       */
      account_type?: "bank_account" | "credit_card" | "other" | null;
      /**
       * @description The International Bank Account Number (IBAN).
       * @example CH2989144532982975332
       */
      iban?: string | null;
      /**
       * @description The Bank Identifier Code (BIC).
       * @example AUDSCHGGXXX
       */
      bic?: string | null;
      /**
       * Routing number
       * @description A routing number is a nine-digit code used to identify a financial institution in the United States.
       * @example 012345678
       */
      routing_number?: string | null;
      /**
       * BSB Number
       * @description A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
       * @example 062-001
       */
      bsb_number?: string | null;
      /**
       * Branch Identifier
       * @description A branch identifier is a unique identifier for a branch of a bank or financial institution.
       * @example 001
       */
      branch_identifier?: string | null;
      /**
       * Bank Code
       * @description A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
       * @example BNH
       */
      bank_code?: string | null;
      currency?: components["schemas"]["Currency"];
    };
    /**
     * @example {
     *   "name": "SpaceX"
     * }
     */
    CompaniesFilter: {
      /**
       * @description Name of the company to filter on
       * @example SpaceX
       */
      name?: string;
    };
    /**
     * @example {
     *   "by": "created_at",
     *   "direction": "desc"
     * }
     */
    CompaniesSort: {
      /**
       * @description The field on which to sort the Companies
       * @example created_at
       * @enum {string}
       */
      by?: "created_at" | "updated_at" | "name";
      direction?: components["schemas"]["SortDirection"];
    };
    Company: {
      /**
       * @description Unique identifier for the company
       * @example 12345
       */
      id?: string;
      /**
       * Name
       * @description Name of the company
       * @example SpaceX
       */
      name: string;
      /**
       * @description Number of interactions
       * @example 1
       */
      interaction_count?: number | null;
      /**
       * @description Owner ID
       * @example 12345
       */
      owner_id?: string | null;
      /**
       * @description The Image URL of the company
       * @example https://www.spacex.com/static/images/share.jpg
       */
      image?: string | null;
      /**
       * @description A description of the company
       * @example Space Exploration Technologies Corp. is an American aerospace manufacturer, space transportation services and communications company headquartered in Hawthorne, California.
       */
      description?: string | null;
      /**
       * @description The VAT number of the company
       * @example BE0689615164
       */
      vat_number?: string | null;
      currency?: components["schemas"]["Currency"];
      /**
       * @description The status of the company
       * @example Open
       */
      status?: string | null;
      /**
       * @description The fax number of the company
       * @example +12129876543
       */
      fax?: string | null;
      /**
       * @description The annual revenue of the company
       * @example +$35m
       */
      annual_revenue?: string | null;
      /**
       * @description Number of employees
       * @example 500-1000
       */
      number_of_employees?: string | null;
      /**
       * @description The industry represents the type of business the company is in.
       * @example Apparel
       */
      industry?: string | null;
      /**
       * @description The ownership indicates the type of ownership of the company.
       * @example Public
       */
      ownership?: string | null;
      /**
       * Sales tax number
       * @description A sales tax number is a unique number that identifies a company for tax purposes.
       * @example 12456EN
       */
      sales_tax_number?: string | null;
      /**
       * Payee number
       * @description A payee number is a unique number that identifies a payee for tax purposes.
       * @example 78932EN
       */
      payee_number?: string | null;
      /**
       * ABN or TFN
       * @description An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
       * @example 46 115 614 695
       */
      abn_or_tfn?: string | null;
      /**
       * ABN Branch
       * @description An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
       * @example 123
       */
      abn_branch?: string | null;
      /**
       * ACN
       * @description The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
       * @example XXX XXX XXX
       */
      acn?: string | null;
      first_name?: components["schemas"]["FirstName"];
      last_name?: components["schemas"]["LastName"];
      /**
       * @description Parent ID
       * @example 22345
       */
      parent_id?: string | null;
      bank_accounts?: components["schemas"]["BankAccount"][];
      websites?: components["schemas"]["Website"][];
      addresses?: components["schemas"]["Address"][];
      social_links?: components["schemas"]["SocialLink"][];
      phone_numbers?: components["schemas"]["PhoneNumber"][];
      emails?: components["schemas"]["Email"][];
      /** Company Row Type */
      row_type?: {
        /** @example 12345 */
        id?: string | null;
        /** @example Customer Account */
        name?: string | null;
      };
      custom_fields?: components["schemas"]["CustomField"][];
      tags?: components["schemas"]["Tags"];
      /**
       * Read-only
       * @description Whether the company is read-only or not
       * @example false
       */
      read_only?: boolean | null;
      /**
       * Format: date-time
       * @description Last activity date
       * @example 2020-09-30T07:43:32.000Z
       */
      last_activity_at?: string | null;
      /**
       * @description Whether the company is deleted or not
       * @example false
       */
      deleted?: boolean;
      /**
       * @description A formal salutation for the person. For example, 'Mr', 'Mrs'
       * @example Mr
       */
      salutation?: string | null;
      /**
       * Birth Date
       * Format: date
       * @description The date of birth of the person.
       * @example 2000-08-12
       */
      birthday?: string | null;
      custom_mappings?: components["schemas"]["CustomMappings"];
      /**
       * @description Updated by user ID
       * @example 12345
       */
      updated_by?: string | null;
      /**
       * @description Created by user ID
       * @example 12345
       */
      created_by?: string | null;
      /**
       * Format: date-time
       * @description Last updated date
       * @example 2020-09-30T07:43:32.000Z
       */
      updated_at?: string | null;
      /**
       * Format: date-time
       * @description Creation date
       * @example 2020-09-30T07:43:32.000Z
       */
      created_at?: string | null;
    };
    Contact: {
      /**
       * @description Unique identifier for the contact.
       * @example 12345
       */
      id?: string;
      /**
       * @description Full name of the contact.
       * @example Elon Musk
       */
      name: string | null;
      /**
       * @description The owner of the contact.
       * @example 54321
       */
      owner_id?: string | null;
      /**
       * @description The type of the contact.
       * @example personal
       * @enum {string|null}
       */
      type?: "customer" | "supplier" | "employee" | "personal" | null;
      /**
       * @description The company the contact is associated with.
       * @example 23456
       */
      company_id?: string | null;
      /**
       * @description The name of the company the contact is associated with.
       * @example 23456
       */
      company_name?: string | null;
      /**
       * @description The lead the contact is associated with.
       * @example 34567
       */
      lead_id?: string | null;
      /**
       * @description The first name of the contact.
       * @example Elon
       */
      first_name?: string | null;
      /**
       * @description The middle name of the contact.
       * @example D.
       */
      middle_name?: string | null;
      /**
       * @description The last name of the contact.
       * @example Musk
       */
      last_name?: string | null;
      /**
       * @description The prefix of the contact.
       * @example Mr.
       */
      prefix?: string | null;
      /**
       * @description The suffix of the contact.
       * @example PhD
       */
      suffix?: string | null;
      /**
       * @description The job title of the contact.
       * @example CEO
       */
      title?: string | null;
      /**
       * @description The department of the contact.
       * @example Engineering
       */
      department?: string | null;
      /**
       * @description language code according to ISO 639-1. For the United States - EN
       * @example EN
       */
      language?: string | null;
      /**
       * @description The gender of the contact.
       * @example female
       * @enum {string|null}
       */
      gender?: "male" | "female" | "unisex" | null;
      /**
       * @description The birthday of the contact.
       * @example 2000-08-12
       */
      birthday?: string | null;
      /**
       * @deprecated
       * @example https://unavatar.io/elon-musk
       */
      image?: string | null;
      /**
       * Photo URL
       * @description The URL of the photo of a person.
       * @example https://unavatar.io/elon-musk
       */
      photo_url?: string | null;
      /**
       * @description The lead source of the contact.
       * @example Cold Call
       */
      lead_source?: string | null;
      /**
       * @description The fax number of the contact.
       * @example +12129876543
       */
      fax?: string | null;
      /**
       * Description
       * @description The description of the contact.
       * @example Internal champion
       */
      description?: string | null;
      /**
       * Current Balance
       * @description The current balance of the contact.
       * @example 10.5
       */
      current_balance?: number | null;
      /**
       * @description The status of the contact.
       * @example open
       */
      status?: string | null;
      /**
       * @description The active status of the contact.
       * @example true
       */
      active?: boolean | null;
      websites?: components["schemas"]["Website"][];
      addresses?: components["schemas"]["Address"][];
      social_links?: components["schemas"]["SocialLink"][];
      phone_numbers?: components["schemas"]["PhoneNumber"][];
      emails?: components["schemas"]["Email"][];
      /** @example gmail.com */
      email_domain?: string | null;
      custom_fields?: components["schemas"]["CustomField"][];
      tags?: components["schemas"]["Tags"];
      /**
       * Format: date-time
       * @description The first call date of the contact.
       * @example 2020-09-30T07:43:32.000Z
       */
      first_call_at?: string | null;
      /**
       * Format: date-time
       * @description The first email date of the contact.
       * @example 2020-09-30T07:43:32.000Z
       */
      first_email_at?: string | null;
      /**
       * Format: date-time
       * @description The last activity date of the contact.
       * @example 2020-09-30T07:43:32.000Z
       */
      last_activity_at?: string | null;
      custom_mappings?: components["schemas"]["CustomMappings"];
      /**
       * Format: date-time
       * @description The last update date of the contact.
       * @example 2017-08-12T20:43:21.291Z
       */
      updated_at?: string | null;
      /**
       * Format: date-time
       * @description The creation date of the contact.
       * @example 2017-08-12T20:43:21.291Z
       */
      created_at?: string | null;
    };
    /**
     * @example {
     *   "first_name": "Elon",
     *   "last_name": "Musk",
     *   "email": "elon@tesla.com",
     *   "company_id": "12345"
     * }
     */
    ContactsFilter: {
      /**
       * @description Name of the contact to filter on
       * @example Elon Musk
       */
      name?: string;
      /**
       * @description First name of the contact to filter on
       * @example Elon
       */
      first_name?: string;
      /**
       * @description Last name of the contact to filter on
       * @example Musk
       */
      last_name?: string;
      /**
       * @description Email of the contact to filter on
       * @example elon@tesla.com
       */
      email?: string;
      /**
       * @description Phone number of the contact to filter on
       * @example 111-111-1111
       */
      phone_number?: string;
      /**
       * @description Unique identifier for the associated company of the contact to filter on
       * @example 12345
       */
      company_id?: string;
    };
    /**
     * @example {
     *   "by": "created_at",
     *   "direction": "desc"
     * }
     */
    ContactsSort: {
      /**
       * @description The field on which to sort the Contacts
       * @example created_at
       * @enum {string}
       */
      by?: "created_at" | "updated_at" | "name" | "first_name" | "last_name" | "email";
      direction?: components["schemas"]["SortDirection"];
    };
    CreateActivityResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example activities
       */
      resource: string;
      /**
       * @description Operation performed
       * @example add
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    CreateCompanyResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example companies
       */
      resource: string;
      /**
       * @description Operation performed
       * @example add
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    CreateContactResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example contacts
       */
      resource: string;
      /**
       * @description Operation performed
       * @example add
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    CreateLeadResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example companies
       */
      resource: string;
      /**
       * @description Operation performed
       * @example add
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    CreateNoteResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example notes
       */
      resource: string;
      /**
       * @description Operation performed
       * @example add
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    CreateOpportunityResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example opportunities
       */
      resource: string;
      /**
       * @description Operation performed
       * @example add
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    CreatePipelineResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example pipelines
       */
      resource: string;
      /**
       * @description Operation performed
       * @example add
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    CreateUserResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example users
       */
      resource: string;
      /**
       * @description Operation performed
       * @example add
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    /**
     * @example crm.company.created
     * @enum {string}
     */
    CrmEventType: "*" | "crm.activity.created" | "crm.activity.updated" | "crm.activity.deleted" | "crm.company.created" | "crm.company.updated" | "crm.company.deleted" | "crm.contact.created" | "crm.contact.updated" | "crm.contact.deleted" | "crm.lead.created" | "crm.lead.updated" | "crm.lead.deleted" | "crm.note.created" | "crm.note.updated" | "crm.note.deleted" | "crm.opportunity.created" | "crm.opportunity.updated" | "crm.opportunity.deleted";
    CrmWebhookEvent: ({
      /**
       * @description Unique reference to this request event
       * @example 9755c355-56c3-4a2f-a2da-86ff4411fccb
       */
      event_id?: string;
      /**
       * @description Name of Apideck Unified API
       * @example crm
       * @enum {string}
       */
      unified_api?: "accounting" | "ats" | "calendar" | "crm" | "csp" | "customer-support" | "ecommerce" | "email" | "email-marketing" | "expense-management" | "file-storage" | "form" | "hris" | "lead" | "payroll" | "pos" | "procurement" | "project-management" | "script" | "sms" | "spreadsheet" | "team-messaging" | "issue-tracking" | "time-registration" | "transactional-email" | "vault" | "data-warehouse";
      /**
       * @description Service provider identifier
       * @example close
       */
      service_id?: string;
      /**
       * @description Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.
       * @example test_consumer_id
       */
      consumer_id?: string;
      /**
       * @description The service provider's ID of the entity that triggered this event
       * @example 123456ASDF
       */
      entity_id?: string;
      /**
       * @description The type entity that triggered this event
       * @example Company
       */
      entity_type?: string;
      /**
       * @description The url to retrieve entity detail.
       * @example https://unify.apideck.com/crm/contacts/123456
       */
      entity_url?: string;
      /**
       * @description The current count this request event has been attempted
       * @example 2
       */
      execution_attempt?: number;
      /**
       * @description ISO Datetime for when the original event occurred
       * @example 2021-10-01T03:14:55.419Z
       */
      occurred_at?: string;
    }) & {
      event_type?: components["schemas"]["CrmEventType"];
    };
    /**
     * Currency
     * @description Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     * @example USD
     * @enum {string|null}
     */
    Currency: "UNKNOWN_CURRENCY" | "AED" | "AFN" | "ALL" | "AMD" | "ANG" | "AOA" | "ARS" | "AUD" | "AWG" | "AZN" | "BAM" | "BBD" | "BDT" | "BGN" | "BHD" | "BIF" | "BMD" | "BND" | "BOB" | "BOV" | "BRL" | "BSD" | "BTN" | "BWP" | "BYR" | "BZD" | "CAD" | "CDF" | "CHE" | "CHF" | "CHW" | "CLF" | "CLP" | "CNY" | "COP" | "COU" | "CRC" | "CUC" | "CUP" | "CVE" | "CZK" | "DJF" | "DKK" | "DOP" | "DZD" | "EGP" | "ERN" | "ETB" | "EUR" | "FJD" | "FKP" | "GBP" | "GEL" | "GHS" | "GIP" | "GMD" | "GNF" | "GTQ" | "GYD" | "HKD" | "HNL" | "HRK" | "HTG" | "HUF" | "IDR" | "ILS" | "INR" | "IQD" | "IRR" | "ISK" | "JMD" | "JOD" | "JPY" | "KES" | "KGS" | "KHR" | "KMF" | "KPW" | "KRW" | "KWD" | "KYD" | "KZT" | "LAK" | "LBP" | "LKR" | "LRD" | "LSL" | "LTL" | "LVL" | "LYD" | "MAD" | "MDL" | "MGA" | "MKD" | "MMK" | "MNT" | "MOP" | "MRO" | "MUR" | "MVR" | "MWK" | "MXN" | "MXV" | "MYR" | "MZN" | "NAD" | "NGN" | "NIO" | "NOK" | "NPR" | "NZD" | "OMR" | "PAB" | "PEN" | "PGK" | "PHP" | "PKR" | "PLN" | "PYG" | "QAR" | "RON" | "RSD" | "RUB" | "RWF" | "SAR" | "SBD" | "SCR" | "SDG" | "SEK" | "SGD" | "SHP" | "SLL" | "SOS" | "SRD" | "SSP" | "STD" | "SVC" | "SYP" | "SZL" | "THB" | "TJS" | "TMT" | "TND" | "TOP" | "TRC" | "TRY" | "TTD" | "TWD" | "TZS" | "UAH" | "UGX" | "USD" | "USN" | "USS" | "UYI" | "UYU" | "UZS" | "VEF" | "VND" | "VUV" | "WST" | "XAF" | "XAG" | "XAU" | "XBA" | "XBB" | "XBC" | "XBD" | "XCD" | "XDR" | "XOF" | "XPD" | "XPF" | "XPT" | "XTS" | "XXX" | "YER" | "ZAR" | "ZMK" | "ZMW" | "BTC" | "ETH" | null;
    CustomField: {
      /**
       * ID
       * @description Unique identifier for the custom field.
       * @example 2389328923893298
       */
      id: string | null;
      /**
       * Name
       * @description Name of the custom field.
       * @example employee_level
       */
      name?: string | null;
      /**
       * Description
       * @description More information about the custom field
       * @example Employee Level
       */
      description?: string | null;
      value?: unknown;
    };
    DeleteActivityResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example activities
       */
      resource: string;
      /**
       * @description Operation performed
       * @example delete
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    DeleteCompanyResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example companies
       */
      resource: string;
      /**
       * @description Operation performed
       * @example delete
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    DeleteContactResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example contacts
       */
      resource: string;
      /**
       * @description Operation performed
       * @example delete
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    DeleteLeadResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example companies
       */
      resource: string;
      /**
       * @description Operation performed
       * @example delete
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    DeleteNoteResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example notes
       */
      resource: string;
      /**
       * @description Operation performed
       * @example delete
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    DeleteOpportunityResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example companies
       */
      resource: string;
      /**
       * @description Operation performed
       * @example delete
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    DeletePipelineResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example companies
       */
      resource: string;
      /**
       * @description Operation performed
       * @example delete
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    DeleteUserResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example users
       */
      resource: string;
      /**
       * @description Operation performed
       * @example delete
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    Email: {
      /**
       * @description Unique identifier for the email address
       * @example 123
       */
      id?: string | null;
      /**
       * Format: email
       * @description Email address
       * @example elon@musk.com
       */
      email: string | null;
      /**
       * @description Email type
       * @example primary
       * @enum {string|null}
       */
      type?: "primary" | "secondary" | "work" | "personal" | "billing" | "other" | null;
    };
    /**
     * First name
     * @description The first name of the person.
     * @example Elon
     */
    FirstName: string | null;
    GetActivitiesResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example activities
       */
      resource: string;
      /**
       * @description Operation performed
       * @example all
       */
      operation: string;
      data: components["schemas"]["Activity"][];
      meta?: components["schemas"]["Meta"];
      links?: components["schemas"]["Links"];
    };
    GetActivityResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example activities
       */
      resource: string;
      /**
       * @description Operation performed
       * @example one
       */
      operation: string;
      data: components["schemas"]["Activity"];
    };
    GetCompaniesResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example companies
       */
      resource: string;
      /**
       * @description Operation performed
       * @example all
       */
      operation: string;
      data: components["schemas"]["Company"][];
      meta?: components["schemas"]["Meta"];
      links?: components["schemas"]["Links"];
    };
    GetCompanyResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example companies
       */
      resource: string;
      /**
       * @description Operation performed
       * @example one
       */
      operation: string;
      data: components["schemas"]["Company"];
    };
    GetContactResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example companies
       */
      resource: string;
      /**
       * @description Operation performed
       * @example one
       */
      operation: string;
      data: components["schemas"]["Contact"];
    };
    GetContactsResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example contacts
       */
      resource: string;
      /**
       * @description Operation performed
       * @example all
       */
      operation: string;
      data: components["schemas"]["Contact"][];
      meta?: components["schemas"]["Meta"];
      links?: components["schemas"]["Links"];
    };
    GetLeadResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example companies
       */
      resource: string;
      /**
       * @description Operation performed
       * @example one
       */
      operation: string;
      data: components["schemas"]["Lead"];
    };
    GetLeadsResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example companies
       */
      resource: string;
      /**
       * @description Operation performed
       * @example all
       */
      operation: string;
      data: components["schemas"]["Lead"][];
      meta?: components["schemas"]["Meta"];
      links?: components["schemas"]["Links"];
    };
    GetNoteResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example notes
       */
      resource: string;
      /**
       * @description Operation performed
       * @example one
       */
      operation: string;
      data: components["schemas"]["Note"];
    };
    GetNotesResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example notes
       */
      resource: string;
      /**
       * @description Operation performed
       * @example all
       */
      operation: string;
      data: components["schemas"]["Note"][];
      meta?: components["schemas"]["Meta"];
      links?: components["schemas"]["Links"];
    };
    GetOpportunitiesResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example opportunities
       */
      resource: string;
      /**
       * @description Operation performed
       * @example all
       */
      operation: string;
      data: components["schemas"]["Opportunity"][];
      meta?: components["schemas"]["Meta"];
      links?: components["schemas"]["Links"];
    };
    GetOpportunityResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example opportunities
       */
      resource: string;
      /**
       * @description Operation performed
       * @example one
       */
      operation: string;
      data: components["schemas"]["Opportunity"];
    };
    GetPipelineResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example pipelines
       */
      resource: string;
      /**
       * @description Operation performed
       * @example one
       */
      operation: string;
      data: components["schemas"]["Pipeline"];
    };
    GetPipelinesResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example pipelines
       */
      resource: string;
      /**
       * @description Operation performed
       * @example all
       */
      operation: string;
      data: components["schemas"]["Pipeline"][];
      meta?: components["schemas"]["Meta"];
      links?: components["schemas"]["Links"];
    };
    GetUserResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example companies
       */
      resource: string;
      /**
       * @description Operation performed
       * @example one
       */
      operation: string;
      data: components["schemas"]["User"];
    };
    GetUsersResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example users
       */
      resource: string;
      /**
       * @description Operation performed
       * @example all
       */
      operation: string;
      data: components["schemas"]["User"][];
      meta?: components["schemas"]["Meta"];
      links?: components["schemas"]["Links"];
    };
    /**
     * Last name
     * @description The last name of the person.
     * @example Musk
     */
    LastName: string | null;
    Lead: {
      /**
       * @description Unique identifier for the contact.
       * @example 12345
       */
      id?: string;
      /**
       * @description Full name of the lead.
       * @example Elon Musk
       */
      name: string;
      /**
       * @description The name of the company the lead is associated with.
       * @example Spacex
       */
      company_name: string | null;
      /**
       * @description The owner of the lead.
       * @example 54321
       */
      owner_id?: string | null;
      /**
       * @description The company the lead is associated with.
       * @example 2
       */
      company_id?: string | null;
      /**
       * @description The identifier of the lead.
       * @example 2
       */
      lead_id?: string | null;
      /**
       * @description The source of the lead.
       * @example Cold Call
       */
      lead_source?: string | null;
      /**
       * @description The first name of the lead.
       * @example Elon
       */
      first_name?: string | null;
      /**
       * @description The last name of the lead.
       * @example Musk
       */
      last_name?: string | null;
      /**
       * @description The description of the lead.
       * @example A thinker
       */
      description?: string | null;
      /**
       * @description The prefix of the lead.
       * @example Sir
       */
      prefix?: string | null;
      /**
       * @description The job title of the lead.
       * @example CEO
       */
      title?: string | null;
      /**
       * @description language code according to ISO 639-1. For the United States - EN
       * @example EN
       */
      language?: string | null;
      /** @example New */
      status?: string | null;
      /**
       * @description The monetary amount of the lead.
       * @example 75000
       */
      monetary_amount?: number | null;
      currency?: components["schemas"]["Currency"];
      /**
       * @description The fax number of the lead.
       * @example +12129876543
       */
      fax?: string | null;
      websites?: components["schemas"]["Website"][];
      addresses?: components["schemas"]["Address"][];
      social_links?: components["schemas"]["SocialLink"][];
      phone_numbers?: components["schemas"]["PhoneNumber"][];
      emails?: components["schemas"]["Email"][];
      custom_fields?: components["schemas"]["CustomField"][];
      tags?: components["schemas"]["Tags"];
      custom_mappings?: components["schemas"]["CustomMappings"];
      /**
       * @description Date updated in ISO 8601 format
       * @example 2020-09-30T07:43:32.000Z
       */
      updated_at?: string | null;
      /**
       * @description Date created in ISO 8601 format
       * @example 2020-09-30T07:43:32.000Z
       */
      created_at?: string | null;
    };
    /**
     * @example {
     *   "first_name": "Elon",
     *   "last_name": "Musk",
     *   "email": "elon@tesla.com"
     * }
     */
    LeadsFilter: {
      /**
       * @description Name of the lead to filter on
       * @example Elon Musk
       */
      name?: string;
      /**
       * @description First name of the lead to filter on
       * @example Elon
       */
      first_name?: string;
      /**
       * @description Last name of the lead to filter on
       * @example Musk
       */
      last_name?: string;
      /**
       * @description E-mail of the lead to filter on
       * @example elon@tesla.com
       */
      email?: string;
    };
    /**
     * @example {
     *   "by": "created_at",
     *   "direction": "desc"
     * }
     */
    LeadsSort: {
      /**
       * @description The field on which to sort the Leads
       * @example created_at
       * @enum {string}
       */
      by?: "created_at" | "updated_at" | "name" | "first_name" | "last_name" | "email";
      direction?: components["schemas"]["SortDirection"];
    };
    /** @description Links to navigate to previous or next pages through the API */
    Links: {
      /**
       * @description Link to navigate to the previous page through the API
       * @example https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D
       */
      previous?: string | null;
      /**
       * @description Link to navigate to the current page through the API
       * @example https://unify.apideck.com/crm/companies
       */
      current?: string;
      /**
       * @description Link to navigate to the previous page through the API
       * @example https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM
       */
      next?: string | null;
    };
    /** @description Response metadata */
    Meta: {
      /**
       * @description Number of items returned in the data property of the response
       * @example 50
       */
      items_on_page?: number;
      /** @description Cursors to navigate to previous or next pages through the API */
      cursors?: {
        /**
         * @description Cursor to navigate to the previous page of results through the API
         * @example em9oby1jcm06OnBhZ2U6OjE=
         */
        previous?: string | null;
        /**
         * @description Cursor to navigate to the current page of results through the API
         * @example em9oby1jcm06OnBhZ2U6OjI=
         */
        current?: string | null;
        /**
         * @description Cursor to navigate to the next page of results through the API
         * @example em9oby1jcm06OnBhZ2U6OjM=
         */
        next?: string | null;
      };
    };
    NotFoundResponse: {
      /**
       * @description HTTP status code
       * @example 404
       */
      status_code?: number;
      /**
       * @description Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
       * @example Not Found
       */
      error?: string;
      /**
       * @description The type of error returned
       * @example EntityNotFoundError
       */
      type_name?: string;
      /**
       * @description A human-readable message providing more details about the error.
       * @example Unknown Widget
       */
      message?: string;
      /** @description Contains parameter or domain specific information related to the error and why it occurred. */
      detail?: string | Record<string, never>;
      /**
       * @description Link to documentation of error type
       * @example https://developers.apideck.com/errors#entitynotfounderror
       */
      ref?: string;
    };
    NotImplementedResponse: {
      /**
       * @description HTTP status code
       * @example 501
       */
      status_code?: number;
      /**
       * @description Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
       * @example Not Implemented
       */
      error?: string;
      /**
       * @description The type of error returned
       * @example MappingError
       */
      type_name?: string;
      /**
       * @description A human-readable message providing more details about the error.
       * @example Unmapped Attribute
       */
      message?: string;
      /** @description Contains parameter or domain specific information related to the error and why it occurred. */
      detail?: string | Record<string, never>;
      /**
       * @description Link to documentation of error type
       * @example https://developers.apideck.com/errors#mappingerror
       */
      ref?: string;
    };
    Note: {
      /**
       * @description The unique identifier of the note
       * @example 12345
       */
      id?: string;
      /**
       * @description The title of the note
       * @example Meeting Notes
       */
      title?: string | null;
      /**
       * @description The content of the note.
       * @example Office hours are 9AM-6PM
       */
      content?: string | null;
      /**
       * @description The user that owns the note.
       * @example 12345
       */
      owner_id?: string | null;
      /**
       * @description The contact that is related to the note.
       * @example 12345
       */
      contact_id?: string | null;
      /**
       * @description The company that is related to the note.
       * @example 12345
       */
      company_id?: string | null;
      /**
       * @description The opportunity that is related to the note.
       * @example 12345
       */
      opportunity_id?: string | null;
      /**
       * @description The lead that is related to the note.
       * @example 12345
       */
      lead_id?: string | null;
      /**
       * @description Whether the Note is active or not.
       * @example true
       */
      active?: boolean | null;
      custom_mappings?: components["schemas"]["CustomMappings"];
      /**
       * @description The user that last updated the note.
       * @example 12345
       */
      updated_by?: string | null;
      /**
       * @description The user that created the note.
       * @example 12345
       */
      created_by?: string | null;
      /**
       * @description The timestamp when the note was last updated
       * @example 2020-09-30T07:43:32.000Z
       */
      updated_at?: string | null;
      /**
       * @description The timestamp when the note was created
       * @example 2020-09-30T07:43:32.000Z
       */
      created_at?: string | null;
    };
    /**
     * @example {
     *   "status": "Completed",
     *   "monetary_amount": 75000
     * }
     */
    OpportunitiesFilter: {
      /**
       * @description Title of the opportunity to filter on
       * @example Tesla deal
       */
      title?: string;
      /**
       * @description Status to filter on
       * @example Completed
       */
      status?: string;
      /**
       * @description Monetary amount to filter on
       * @example 75000
       */
      monetary_amount?: number;
      /**
       * @description Win probability to filter on
       * @example 50
       */
      win_probability?: number;
      /**
       * @description Company ID to filter on
       * @example 1234
       */
      company_id?: string;
      /**
       * @description Owner ID to filter on
       * @example 1234
       */
      owner_id?: string;
      /**
       * @description Primary contact ID to filter on
       * @example 1234
       */
      primary_contact_id?: string;
    };
    /**
     * @example {
     *   "by": "created_at",
     *   "direction": "desc"
     * }
     */
    OpportunitiesSort: {
      /**
       * @description The field on which to sort the Opportunities
       * @example created_at
       * @enum {string}
       */
      by?: "created_at" | "updated_at" | "title" | "win_probability" | "monetary_amount" | "status";
      direction?: components["schemas"]["SortDirection"];
    };
    Opportunity: {
      /**
       * @description A unique identifier for the opportunity.
       * @example 12345
       */
      id?: string;
      /**
       * @description The title or name of the opportunity.
       * @example New Rocket
       */
      title: string;
      /**
       * @description The unique identifier of the primary contact associated with the opportunity.
       * @example 12345
       */
      primary_contact_id: string | null;
      /**
       * @description A description of the opportunity.
       * @example Opportunities are created for People and Companies that are interested in buying your products or services. Create Opportunities for People and Companies to move them through one of your Pipelines.
       */
      description?: string | null;
      /**
       * @description The type of the opportunity
       * @example Existing Customer - Upgrade
       */
      type?: string | null;
      /**
       * @description The monetary value associated with the opportunity
       * @example 75000
       */
      monetary_amount?: number | null;
      currency?: components["schemas"]["Currency"];
      /**
       * @description The probability of winning the opportunity, expressed as a percentage.
       * @example 40
       */
      win_probability?: number | null;
      /**
       * @description The expected revenue from the opportunity
       * @example 75000
       */
      expected_revenue?: number | null;
      /**
       * Format: date
       * @description The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
       * @example 2020-10-30
       */
      close_date?: string | null;
      /**
       * @description The unique identifier of the reason why the opportunity was lost.
       * @example 12345
       */
      loss_reason_id?: string | null;
      /**
       * @description The reason why the opportunity was lost.
       * @example No budget
       */
      loss_reason?: string | null;
      /**
       * @description The unique identifier of the reason why the opportunity was won.
       * @example 12345
       */
      won_reason_id?: string | null;
      /**
       * @description The reason why the opportunity was won.
       * @example Best pitch
       */
      won_reason?: string | null;
      /**
       * @description The unique identifier of the pipeline associated with the opportunity
       * @example 12345
       */
      pipeline_id?: string | null;
      /**
       * @description The unique identifier of the stage in the pipeline associated with the opportunity.
       * @example 12345
       */
      pipeline_stage_id?: string | null;
      /**
       * @description The unique identifier of the source of the opportunity.
       * @example 12345
       */
      source_id?: string | null;
      /**
       * @description The unique identifier of the lead associated with the opportunity.
       * @example 12345
       */
      lead_id?: string | null;
      /**
       * @description The source of the lead associated with the opportunity.
       * @example Website
       */
      lead_source?: string | null;
      /**
       * @description The unique identifier of the contact associated with the opportunity.
       * @example 12345
       */
      contact_id?: string | null;
      /** @description An array of unique identifiers of all contacts associated with the opportunity. */
      contact_ids?: string[];
      /**
       * @description The unique identifier of the company associated with the opportunity.
       * @example 12345
       */
      company_id?: string | null;
      /**
       * @description The name of the company associated with the opportunity.
       * @example Copper
       */
      company_name?: string | null;
      /**
       * @description The unique identifier of the user who owns the opportunity.
       * @example 12345
       */
      owner_id?: string | null;
      /**
       * @description The priority level of the opportunity.
       * @example None
       */
      priority?: string | null;
      /**
       * @description The current status of the opportunity.
       * @example Open
       */
      status?: string | null;
      /**
       * @description The unique identifier of the current status of the opportunity.
       * @example 12345
       */
      status_id?: string | null;
      tags?: components["schemas"]["Tags"];
      /**
       * @description The number of interactions with the opportunity.
       * @example 0
       */
      interaction_count?: number | null;
      custom_fields?: components["schemas"]["CustomField"][];
      /**
       * Format: date-time
       * @description The date and time when the stage of the opportunity was last changed.
       * @example 2020-09-30T07:43:32.000Z
       */
      stage_last_changed_at?: string | null;
      /**
       * @description The date and time of the last activity associated with the opportunity.
       * @example 2020-09-30T07:43:32.000Z
       */
      last_activity_at?: string | null;
      /**
       * @description Indicates whether the opportunity has been deleted.
       * @example false
       */
      deleted?: boolean;
      /**
       * Format: date-time
       * @description The date and time when the stage of the opportunity was last changed.
       * @example 2020-09-30T00:00:00.000Z
       */
      date_stage_changed?: string | null;
      /**
       * Format: date-time
       * @description The date and time when the opportunity was last contacted.
       * @example 2020-09-30T00:00:00.000Z
       */
      date_last_contacted?: string | null;
      /**
       * Format: date-time
       * @description The date and time when the lead associated with the opportunity was created.
       * @example 2020-09-30T00:00:00.000Z
       */
      date_lead_created?: string | null;
      custom_mappings?: components["schemas"]["CustomMappings"];
      /**
       * @description The unique identifier of the user who last updated the opportunity.
       * @example 12345
       */
      updated_by?: string | null;
      /**
       * @description The unique identifier of the user who created the opportunity.
       * @example 12345
       */
      created_by?: string | null;
      /**
       * Format: date-time
       * @description The date and time when the opportunity was last updated.
       * @example 2020-09-30T07:43:32.000Z
       */
      updated_at?: string | null;
      /**
       * Format: date-time
       * @description The date and time when the opportunity was created.
       * @example 2020-09-30T07:43:32.000Z
       */
      created_at?: string | null;
    };
    /**
     * @example {
     *   "search": "San Francisco"
     * }
     */
    PassThroughQuery: {
      /** @description All passthrough query parameters are passed along to the connector as is (?pass_through[search]=leads becomes ?search=leads) */
      example_downstream_property?: string;
      [key: string]: unknown;
    };
    PaymentRequiredResponse: {
      /**
       * @description HTTP status code
       * @example 402
       */
      status_code?: number;
      /**
       * @description Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
       * @example Payment Required
       */
      error?: string;
      /**
       * @description The type of error returned
       * @example RequestLimitError
       */
      type_name?: string;
      /**
       * @description A human-readable message providing more details about the error.
       * @example Request Limit Reached
       */
      message?: string;
      /**
       * @description Contains parameter or domain specific information related to the error and why it occurred.
       * @example You have reached your limit of 2000
       */
      detail?: string;
      /**
       * @description Link to documentation of error type
       * @example https://developers.apideck.com/errors#requestlimiterror
       */
      ref?: string;
    };
    PhoneNumber: {
      /**
       * @description Unique identifier of the phone number
       * @example 12345
       */
      id?: string | null;
      /**
       * Country code
       * @description The country code of the phone number, e.g. +1
       * @example 1
       */
      country_code?: string | null;
      /**
       * Area code
       * @description The area code of the phone number, e.g. 323
       * @example 323
       */
      area_code?: string | null;
      /**
       * Phone number
       * @description The phone number
       * @example 111-111-1111
       */
      number: string;
      /**
       * Phone extension
       * @description The extension of the phone number
       * @example 105
       */
      extension?: string | null;
      /**
       * @description The type of phone number
       * @example primary
       * @enum {string|null}
       */
      type?: "primary" | "secondary" | "home" | "work" | "office" | "mobile" | "assistant" | "fax" | "direct-dial-in" | "personal" | "other" | null;
    };
    Pipeline: {
      /**
       * @description The unique identifier of the Pipeline.
       * @example default
       */
      id?: string;
      /**
       * @description The name of the Pipeline.
       * @example Sales Pipeline
       */
      name: string;
      currency?: components["schemas"]["Currency"];
      /**
       * @description Whether the Pipeline is archived or not.
       * @example false
       */
      archived?: boolean;
      /**
       * @description Whether the Pipeline is active or not.
       * @example false
       */
      active?: boolean;
      /**
       * @description The order in which the Pipeline is displayed in the UI.
       * @example 1
       */
      display_order?: number | null;
      /**
       * @description Whether the Pipeline has win probability enabled or not.
       * @example true
       */
      win_probability_enabled?: boolean;
      /** @description The Pipeline Stages. */
      stages?: ({
          /**
           * @description The unique identifier of the Pipeline Stage.
           * @example contractsent
           */
          id?: string | null;
          /**
           * @description The name of the Pipeline Stage.
           * @example Contract Sent
           */
          name?: string | null;
          /**
           * @description The value of the Pipeline Stage.
           * @example CONTRACT_SENT
           */
          value?: string | null;
          /**
           * @description The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
           * @example 50
           */
          win_probability?: number | null;
          /**
           * @description The order in which the Pipeline Stage is displayed in the UI.
           * @example 1
           */
          display_order?: number | null;
        })[];
      /**
       * Updated at (timestamp)
       * Format: date-time
       * @description The date and time when the object was last updated.
       * @example 2020-09-30T07:43:32.000Z
       */
      updated_at?: string | null;
      /**
       * Created at (timestamp)
       * Format: date-time
       * @description The date and time when the object was created.
       * @example 2020-09-30T07:43:32.000Z
       */
      created_at?: string | null;
    };
    /**
     * Row version
     * @description A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     * @example 1-12345
     */
    RowVersion: string | null;
    SocialLink: {
      /**
       * @description Unique identifier of the social link
       * @example 12345
       */
      id?: string | null;
      /**
       * @description URL of the social link, e.g. https://www.twitter.com/apideck
       * @example https://www.twitter.com/apideck
       */
      url: string;
      /**
       * @description Type of the social link, e.g. twitter
       * @example twitter
       */
      type?: string | null;
    };
    /**
     * @description The direction in which to sort the results
     * @default asc
     * @enum {string}
     */
    SortDirection: "asc" | "desc";
    /**
     * @example [
     *   "New"
     * ]
     */
    Tags: string[] | null;
    /** @description When custom mappings are configured on the resource, the result is included here. */
    readonly CustomMappings: unknown;
    TooManyRequestsResponse: {
      /**
       * @description HTTP status code
       * @example 429
       */
      status_code?: number;
      /**
       * @description Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)
       * @example Too Many Requests
       */
      error?: string;
      /**
       * @description The type of error returned
       * @example ConnectorRateLimitError
       */
      type_name?: string;
      /**
       * @description A human-readable message providing more details about the error.
       * @example Connector Rate Limit Error
       */
      message?: string;
      detail?: {
        context?: string;
        error?: {
          [key: string]: unknown;
        };
      };
      /**
       * @description Link to documentation of error type
       * @example https://developers.apideck.com/errors#connectorratelimiterror
       */
      ref?: string;
    };
    UnauthorizedResponse: {
      /**
       * @description HTTP status code
       * @example 401
       */
      status_code?: number;
      /**
       * @description Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
       * @example Unauthorized
       */
      error?: string;
      /**
       * @description The type of error returned
       * @example UnauthorizedError
       */
      type_name?: string;
      /**
       * @description A human-readable message providing more details about the error.
       * @example Unauthorized Request
       */
      message?: string;
      /** @description Contains parameter or domain specific information related to the error and why it occurred. */
      detail?: string | Record<string, never>;
      /**
       * @description Link to documentation of error type
       * @example https://developers.apideck.com/errors#unauthorizederror
       */
      ref?: string;
    };
    UnexpectedErrorResponse: {
      /**
       * @description HTTP status code
       * @example 400
       */
      status_code?: number;
      /**
       * @description Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
       * @example Bad Request
       */
      error?: string;
      /**
       * @description The type of error returned
       * @example RequestHeadersValidationError
       */
      type_name?: string;
      /**
       * @description A human-readable message providing more details about the error.
       * @example Invalid Params
       */
      message?: string;
      /** @description Contains parameter or domain specific information related to the error and why it occurred. */
      detail?: string | Record<string, never>;
      /**
       * @description Link to documentation of error type
       * @example https://developers.apideck.com/errors#unauthorizederror
       */
      ref?: string;
    };
    /** UnifiedId */
    UnifiedId: {
      /**
       * Id
       * @description The unique identifier of the resource
       * @example 12345
       */
      id: string;
    };
    UnprocessableResponse: {
      /**
       * @description HTTP status code
       * @example 422
       */
      status_code?: number;
      /**
       * @description Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
       * @example Unprocessable Entity
       */
      error?: string;
      /**
       * @description The type of error returned
       * @example InvalidStateError
       */
      type_name?: string;
      /**
       * @description A human-readable message providing more details about the error.
       * @example Invalid State
       */
      message?: string;
      /** @description Contains parameter or domain specific information related to the error and why it occurred. */
      detail?: string | Record<string, never>;
      /**
       * @description Link to documentation of error type
       * @example https://developers.apideck.com/errors#invalidstateerror
       */
      ref?: string;
    };
    UpdateActivityResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example activities
       */
      resource: string;
      /**
       * @description Operation performed
       * @example update
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    UpdateCompanyResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example companies
       */
      resource: string;
      /**
       * @description Operation performed
       * @example update
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    UpdateContactResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example contacts
       */
      resource: string;
      /**
       * @description Operation performed
       * @example update
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    UpdateLeadResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example companies
       */
      resource: string;
      /**
       * @description Operation performed
       * @example update
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    UpdateNoteResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example notes
       */
      resource: string;
      /**
       * @description Operation performed
       * @example update
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    UpdateOpportunityResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example companies
       */
      resource: string;
      /**
       * @description Operation performed
       * @example update
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    UpdatePipelineResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example pipelines
       */
      resource: string;
      /**
       * @description Operation performed
       * @example update
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    UpdateUserResponse: {
      /**
       * @description HTTP Response Status Code
       * @example 200
       */
      status_code: number;
      /**
       * @description HTTP Response Status
       * @example OK
       */
      status: string;
      /**
       * @description Apideck ID of service provider
       * @example zoho-crm
       */
      service: string;
      /**
       * @description Unified API resource name
       * @example companies
       */
      resource: string;
      /**
       * @description Operation performed
       * @example update
       */
      operation: string;
      data: components["schemas"]["UnifiedId"];
    };
    User: {
      /**
       * @description The unique identifier for the user
       * @example 12345
       */
      id?: string;
      /**
       * @description The parent user id
       * @example 54321
       */
      parent_id?: string | null;
      /**
       * @description The username of the user
       * @example masterofcoin
       */
      username?: string | null;
      first_name?: components["schemas"]["FirstName"];
      last_name?: components["schemas"]["LastName"];
      /**
       * Job title
       * @description The job title of the person.
       * @example CEO
       */
      title?: string | null;
      /**
       * Division
       * @description The division the person is currently in. Usually a collection of departments or teams or regions.
       * @example Europe
       */
      division?: string | null;
      /**
       * Department
       * @deprecated
       * @description The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
       * @example R&D
       */
      department?: string | null;
      /**
       * Company name
       * @description The name of the company.
       * @example SpaceX
       */
      company_name?: string | null;
      /**
       * Employee number
       * @description An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
       * @example 123456-AB
       */
      employee_number?: string | null;
      /**
       * Description
       * @description A description of the object.
       * @example A description
       */
      description?: string | null;
      /**
       * @description The URL of the user's avatar
       * @example https://logo.clearbit.com/spacex.com?s=128
       */
      image?: string | null;
      /**
       * @description language code according to ISO 639-1. For the United States - EN
       * @example EN
       */
      language?: string | null;
      /**
       * @description The status of the user
       * @example active
       */
      status?: string | null;
      /**
       * @description The password of the user
       * @example supersecretpassword
       */
      password?: string | null;
      addresses?: components["schemas"]["Address"][];
      phone_numbers?: components["schemas"]["PhoneNumber"][];
      emails: components["schemas"]["Email"][];
      custom_mappings?: components["schemas"]["CustomMappings"];
      /**
       * @description The date and time when the user was last updated.
       * @example 2017-08-12T20:43:21.291Z
       */
      updated_at?: string | null;
      /**
       * @description The date and time when the user was created.
       * @example 2017-08-12T20:43:21.291Z
       */
      created_at?: string | null;
    };
    Website: {
      /**
       * @description Unique identifier for the website
       * @example 12345
       */
      id?: string | null;
      /**
       * @description The website URL
       * @example http://example.com
       */
      url: string;
      /**
       * @description The type of website
       * @example primary
       * @enum {string|null}
       */
      type?: "primary" | "secondary" | "work" | "personal" | "other" | null;
    };
  };
  responses: {
    /** @description Bad Request */
    BadRequestResponse: {
      content: {
        "application/json": components["schemas"]["BadRequestResponse"];
      };
    };
    /** @description Activity created */
    CreateActivityResponse: {
      content: {
        "application/json": components["schemas"]["CreateActivityResponse"];
      };
    };
    /** @description Company created */
    CreateCompanyResponse: {
      content: {
        "application/json": components["schemas"]["CreateCompanyResponse"];
      };
    };
    /** @description Contact created */
    CreateContactResponse: {
      content: {
        "application/json": components["schemas"]["CreateContactResponse"];
      };
    };
    /** @description Lead created */
    CreateLeadResponse: {
      content: {
        "application/json": components["schemas"]["CreateLeadResponse"];
      };
    };
    /** @description Note created */
    CreateNoteResponse: {
      content: {
        "application/json": components["schemas"]["CreateNoteResponse"];
      };
    };
    /** @description Opportunity created */
    CreateOpportunityResponse: {
      content: {
        "application/json": components["schemas"]["CreateOpportunityResponse"];
      };
    };
    /** @description Pipeline created */
    CreatePipelineResponse: {
      content: {
        "application/json": components["schemas"]["CreatePipelineResponse"];
      };
    };
    /** @description User created */
    CreateUserResponse: {
      content: {
        "application/json": components["schemas"]["CreateUserResponse"];
      };
    };
    /** @description Activity deleted */
    DeleteActivityResponse: {
      content: {
        "application/json": components["schemas"]["DeleteActivityResponse"];
      };
    };
    /** @description Company deleted */
    DeleteCompanyResponse: {
      content: {
        "application/json": components["schemas"]["DeleteCompanyResponse"];
      };
    };
    /** @description Contact deleted */
    DeleteContactResponse: {
      content: {
        "application/json": components["schemas"]["DeleteContactResponse"];
      };
    };
    /** @description Lead deleted */
    DeleteLeadResponse: {
      content: {
        "application/json": components["schemas"]["DeleteLeadResponse"];
      };
    };
    /** @description Note deleted */
    DeleteNoteResponse: {
      content: {
        "application/json": components["schemas"]["DeleteNoteResponse"];
      };
    };
    /** @description Opportunity deleted */
    DeleteOpportunityResponse: {
      content: {
        "application/json": components["schemas"]["DeleteOpportunityResponse"];
      };
    };
    /** @description Pipeline deleted */
    DeletePipelineResponse: {
      content: {
        "application/json": components["schemas"]["DeletePipelineResponse"];
      };
    };
    /** @description User deleted */
    DeleteUserResponse: {
      content: {
        "application/json": components["schemas"]["DeleteUserResponse"];
      };
    };
    /** @description Activities */
    GetActivitiesResponse: {
      content: {
        "application/json": components["schemas"]["GetActivitiesResponse"];
      };
    };
    /** @description Activity */
    GetActivityResponse: {
      content: {
        "application/json": components["schemas"]["GetActivityResponse"];
      };
    };
    /** @description Companies */
    GetCompaniesResponse: {
      content: {
        "application/json": components["schemas"]["GetCompaniesResponse"];
      };
    };
    /** @description Company */
    GetCompanyResponse: {
      content: {
        "application/json": components["schemas"]["GetCompanyResponse"];
      };
    };
    /** @description Contact */
    GetContactResponse: {
      content: {
        "application/json": components["schemas"]["GetContactResponse"];
      };
    };
    /** @description Contacts */
    GetContactsResponse: {
      content: {
        "application/json": components["schemas"]["GetContactsResponse"];
      };
    };
    /** @description Lead */
    GetCrmLeadResponse: {
      content: {
        "application/json": components["schemas"]["GetLeadResponse"];
      };
    };
    /** @description Leads */
    GetLeadsResponse: {
      content: {
        "application/json": components["schemas"]["GetLeadsResponse"];
      };
    };
    /** @description Note */
    GetNoteResponse: {
      content: {
        "application/json": components["schemas"]["GetNoteResponse"];
      };
    };
    /** @description Notes */
    GetNotesResponse: {
      content: {
        "application/json": components["schemas"]["GetNotesResponse"];
      };
    };
    /** @description Opportunities */
    GetOpportunitiesResponse: {
      content: {
        "application/json": components["schemas"]["GetOpportunitiesResponse"];
      };
    };
    /** @description Opportunity */
    GetOpportunityResponse: {
      content: {
        "application/json": components["schemas"]["GetOpportunityResponse"];
      };
    };
    /** @description Pipeline */
    GetPipelineResponse: {
      content: {
        "application/json": components["schemas"]["GetPipelineResponse"];
      };
    };
    /** @description Pipelines */
    GetPipelinesResponse: {
      content: {
        "application/json": components["schemas"]["GetPipelinesResponse"];
      };
    };
    /** @description User */
    GetUserResponse: {
      content: {
        "application/json": components["schemas"]["GetUserResponse"];
      };
    };
    /** @description Users */
    GetUsersResponse: {
      content: {
        "application/json": components["schemas"]["GetUsersResponse"];
      };
    };
    /** @description The specified resource was not found */
    NotFoundResponse: {
      content: {
        "application/json": components["schemas"]["NotFoundResponse"];
      };
    };
    /** @description Not Implemented */
    NotImplementedResponse: {
      content: {
        "application/json": components["schemas"]["NotImplementedResponse"];
      };
    };
    /** @description Payment Required */
    PaymentRequiredResponse: {
      content: {
        "application/json": components["schemas"]["PaymentRequiredResponse"];
      };
    };
    /** @description Too Many Requests */
    TooManyRequestsResponse: {
      content: {
        "application/json": components["schemas"]["TooManyRequestsResponse"];
      };
    };
    /** @description Unauthorized */
    UnauthorizedResponse: {
      content: {
        "application/json": components["schemas"]["UnauthorizedResponse"];
      };
    };
    /** @description Unexpected error */
    UnexpectedErrorResponse: {
      content: {
        "application/json": components["schemas"]["UnexpectedErrorResponse"];
      };
    };
    /** @description Unprocessable */
    UnprocessableResponse: {
      content: {
        "application/json": components["schemas"]["UnprocessableResponse"];
      };
    };
    /** @description Activity updated */
    UpdateActivityResponse: {
      content: {
        "application/json": components["schemas"]["UpdateActivityResponse"];
      };
    };
    /** @description Company updated */
    UpdateCompanyResponse: {
      content: {
        "application/json": components["schemas"]["UpdateCompanyResponse"];
      };
    };
    /** @description Contact updated */
    UpdateContactResponse: {
      content: {
        "application/json": components["schemas"]["UpdateContactResponse"];
      };
    };
    /** @description Lead updated */
    UpdateLeadResponse: {
      content: {
        "application/json": components["schemas"]["UpdateLeadResponse"];
      };
    };
    /** @description Note updated */
    UpdateNoteResponse: {
      content: {
        "application/json": components["schemas"]["UpdateNoteResponse"];
      };
    };
    /** @description Opportunity updated */
    UpdateOpportunityResponse: {
      content: {
        "application/json": components["schemas"]["UpdateOpportunityResponse"];
      };
    };
    /** @description Pipeline updated */
    UpdatePipelineResponse: {
      content: {
        "application/json": components["schemas"]["UpdatePipelineResponse"];
      };
    };
    /** @description User updated */
    UpdateUserResponse: {
      content: {
        "application/json": components["schemas"]["UpdateUserResponse"];
      };
    };
  };
  parameters: {
    /** @description Apply filters */
    activitiesFilter?: components["schemas"]["ActivitiesFilter"];
    /** @description Apply sorting */
    activitiesSort?: components["schemas"]["ActivitiesSort"];
    /**
     * @description The ID of your Unify application
     * @example dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX
     */
    applicationId: string;
    /** @description Apply filters */
    companiesFilter?: components["schemas"]["CompaniesFilter"];
    /** @description Apply sorting */
    companiesSort?: components["schemas"]["CompaniesSort"];
    /** @description ID of the consumer which you want to get or push data from */
    consumerId: string;
    /** @description Apply filters */
    contactsFilter?: components["schemas"]["ContactsFilter"];
    /** @description Apply sorting */
    contactsSort?: components["schemas"]["ContactsSort"];
    /** @description Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */
    cursor?: string | null;
    /**
     * @description The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
     * @example id,updated_at
     */
    fields?: string | null;
    /** @description ID of the record you are acting upon. */
    id: string;
    /** @description Apply filters */
    leadsFilter?: components["schemas"]["LeadsFilter"];
    /** @description Apply sorting */
    leadsSort?: components["schemas"]["LeadsSort"];
    /** @description Number of results to return. Minimum 1, Maximum 200, Default 20 */
    limit?: number;
    /** @description Apply filters */
    opportunitiesFilter?: components["schemas"]["OpportunitiesFilter"];
    /** @description Apply sorting */
    opportunitiesSort?: components["schemas"]["OpportunitiesSort"];
    /** @description Include raw response. Mostly used for debugging purposes */
    raw?: boolean;
    /** @description Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. */
    serviceId?: string;
    /** @description Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads */
    passThrough?: components["schemas"]["PassThroughQuery"];
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * List companies
   * @description List companies
   */
  companiesAll: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
        cursor?: components["parameters"]["cursor"];
        limit?: components["parameters"]["limit"];
        filter?: components["parameters"]["companiesFilter"];
        sort?: components["parameters"]["companiesSort"];
        pass_through?: components["parameters"]["passThrough"];
        fields?: components["parameters"]["fields"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
    };
    responses: {
      200: components["responses"]["GetCompaniesResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Create company
   * @description Create company
   */
  companiesAdd: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Company"];
      };
    };
    responses: {
      201: components["responses"]["CreateCompanyResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Get company
   * @description Get company
   */
  companiesOne: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
        fields?: components["parameters"]["fields"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    responses: {
      200: components["responses"]["GetCompanyResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Delete company
   * @description Delete company
   */
  companiesDelete: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    responses: {
      200: components["responses"]["DeleteCompanyResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Update company
   * @description Update company
   */
  companiesUpdate: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Company"];
      };
    };
    responses: {
      200: components["responses"]["UpdateCompanyResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * List contacts
   * @description List contacts
   */
  contactsAll: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
        cursor?: components["parameters"]["cursor"];
        limit?: components["parameters"]["limit"];
        filter?: components["parameters"]["contactsFilter"];
        sort?: components["parameters"]["contactsSort"];
        pass_through?: components["parameters"]["passThrough"];
        fields?: components["parameters"]["fields"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
    };
    responses: {
      200: components["responses"]["GetContactsResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Create contact
   * @description Create contact
   */
  contactsAdd: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Contact"];
      };
    };
    responses: {
      201: components["responses"]["CreateContactResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Get contact
   * @description Get contact
   */
  contactsOne: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
        fields?: components["parameters"]["fields"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    responses: {
      200: components["responses"]["GetContactResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Delete contact
   * @description Delete contact
   */
  contactsDelete: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    responses: {
      200: components["responses"]["DeleteContactResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Update contact
   * @description Update contact
   */
  contactsUpdate: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Contact"];
      };
    };
    responses: {
      200: components["responses"]["UpdateContactResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * List opportunities
   * @description List opportunities
   */
  opportunitiesAll: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
        cursor?: components["parameters"]["cursor"];
        limit?: components["parameters"]["limit"];
        filter?: components["parameters"]["opportunitiesFilter"];
        sort?: components["parameters"]["opportunitiesSort"];
        pass_through?: components["parameters"]["passThrough"];
        fields?: components["parameters"]["fields"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
    };
    responses: {
      200: components["responses"]["GetOpportunitiesResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Create opportunity
   * @description Create opportunity
   */
  opportunitiesAdd: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Opportunity"];
      };
    };
    responses: {
      201: components["responses"]["CreateOpportunityResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Get opportunity
   * @description Get opportunity
   */
  opportunitiesOne: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
        fields?: components["parameters"]["fields"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    responses: {
      200: components["responses"]["GetOpportunityResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Delete opportunity
   * @description Delete opportunity
   */
  opportunitiesDelete: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    responses: {
      200: components["responses"]["DeleteOpportunityResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Update opportunity
   * @description Update opportunity
   */
  opportunitiesUpdate: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Opportunity"];
      };
    };
    responses: {
      200: components["responses"]["UpdateOpportunityResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * List leads
   * @description List leads
   */
  leadsAll: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
        cursor?: components["parameters"]["cursor"];
        limit?: components["parameters"]["limit"];
        filter?: components["parameters"]["leadsFilter"];
        sort?: components["parameters"]["leadsSort"];
        pass_through?: components["parameters"]["passThrough"];
        fields?: components["parameters"]["fields"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
    };
    responses: {
      200: components["responses"]["GetLeadsResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Create lead
   * @description Create lead
   */
  leadsAdd: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Lead"];
      };
    };
    responses: {
      201: components["responses"]["CreateLeadResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Get lead
   * @description Get lead
   */
  leadsOne: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
        fields?: components["parameters"]["fields"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    responses: {
      200: components["responses"]["GetCrmLeadResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Delete lead
   * @description Delete lead
   */
  leadsDelete: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    responses: {
      200: components["responses"]["DeleteLeadResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Update lead
   * @description Update lead
   */
  leadsUpdate: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Lead"];
      };
    };
    responses: {
      200: components["responses"]["UpdateLeadResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * List pipelines
   * @description List pipelines
   */
  pipelinesAll: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
        cursor?: components["parameters"]["cursor"];
        limit?: components["parameters"]["limit"];
        pass_through?: components["parameters"]["passThrough"];
        fields?: components["parameters"]["fields"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
    };
    responses: {
      200: components["responses"]["GetPipelinesResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Create pipeline
   * @description Create pipeline
   */
  pipelinesAdd: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Pipeline"];
      };
    };
    responses: {
      201: components["responses"]["CreatePipelineResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Get pipeline
   * @description Get pipeline
   */
  pipelinesOne: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
        fields?: components["parameters"]["fields"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    responses: {
      200: components["responses"]["GetPipelineResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Delete pipeline
   * @description Delete pipeline
   */
  pipelinesDelete: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    responses: {
      200: components["responses"]["DeletePipelineResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Update pipeline
   * @description Update pipeline
   */
  pipelinesUpdate: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Pipeline"];
      };
    };
    responses: {
      200: components["responses"]["UpdatePipelineResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * List notes
   * @description List notes
   */
  notesAll: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
        cursor?: components["parameters"]["cursor"];
        limit?: components["parameters"]["limit"];
        pass_through?: components["parameters"]["passThrough"];
        fields?: components["parameters"]["fields"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
    };
    responses: {
      200: components["responses"]["GetNotesResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Create note
   * @description Create note
   */
  notesAdd: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Note"];
      };
    };
    responses: {
      201: components["responses"]["CreateNoteResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Get note
   * @description Get note
   */
  notesOne: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
        fields?: components["parameters"]["fields"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    responses: {
      200: components["responses"]["GetNoteResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Delete note
   * @description Delete note
   */
  notesDelete: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    responses: {
      200: components["responses"]["DeleteNoteResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Update note
   * @description Update note
   */
  notesUpdate: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Note"];
      };
    };
    responses: {
      200: components["responses"]["UpdateNoteResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * List users
   * @description List users
   */
  usersAll: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
        cursor?: components["parameters"]["cursor"];
        limit?: components["parameters"]["limit"];
        pass_through?: components["parameters"]["passThrough"];
        fields?: components["parameters"]["fields"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
    };
    responses: {
      200: components["responses"]["GetUsersResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Create user
   * @description Create user
   */
  usersAdd: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    responses: {
      201: components["responses"]["CreateUserResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Get user
   * @description Get user
   */
  usersOne: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
        fields?: components["parameters"]["fields"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    responses: {
      200: components["responses"]["GetUserResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Delete user
   * @description Delete user
   */
  usersDelete: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    responses: {
      200: components["responses"]["DeleteUserResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Update user
   * @description Update user
   */
  usersUpdate: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    responses: {
      200: components["responses"]["UpdateUserResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * List activities
   * @description List activities
   */
  activitiesAll: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
        cursor?: components["parameters"]["cursor"];
        limit?: components["parameters"]["limit"];
        filter?: components["parameters"]["activitiesFilter"];
        sort?: components["parameters"]["activitiesSort"];
        pass_through?: components["parameters"]["passThrough"];
        fields?: components["parameters"]["fields"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
    };
    responses: {
      200: components["responses"]["GetActivitiesResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Create activity
   * @description Create activity
   */
  activitiesAdd: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Activity"];
      };
    };
    responses: {
      201: components["responses"]["CreateActivityResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Get activity
   * @description Get activity
   */
  activitiesOne: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
        fields?: components["parameters"]["fields"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    responses: {
      200: components["responses"]["GetActivityResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Delete activity
   * @description Delete activity
   */
  activitiesDelete: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    responses: {
      200: components["responses"]["DeleteActivityResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
  /**
   * Update activity
   * @description Update activity
   */
  activitiesUpdate: {
    parameters: {
      query?: {
        raw?: components["parameters"]["raw"];
      };
      header: {
        "x-apideck-consumer-id": components["parameters"]["consumerId"];
        "x-apideck-app-id": components["parameters"]["applicationId"];
        "x-apideck-service-id"?: components["parameters"]["serviceId"];
      };
      path: {
        id: components["parameters"]["id"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Activity"];
      };
    };
    responses: {
      200: components["responses"]["UpdateActivityResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      402: components["responses"]["PaymentRequiredResponse"];
      404: components["responses"]["NotFoundResponse"];
      422: components["responses"]["UnprocessableResponse"];
      default: components["responses"]["UnexpectedErrorResponse"];
    };
  };
}
